============================================
vis/result.rtx
10:44:41_Monday_22_June_2020
============================================
Feedback:
Your programs ("EthicalEngine.java" ) have been submitted successfully. 
Compiling your programs with "javac"...
============================================
Here are our Junit tests for you:
++Initializing Tests
Test: enumeration <AgeCategory>
Test: enumeration <BodyType>
Test: enumeration <Gender>
Test: enumeration <Profession>
Test: abstract class <Character>
Test: class <Person>
Test: class <Animal>
Test: class <Scenario>
Test: class <ScenarioGenerator>
Test: enumeration <Decision>
Test: class <EthicalEngine>
Test: class <Audit>
- audit header: correct
- 33 characteristics parsed
- [unemployed, pregnant, baby, child, you, average, janitor, doctor, firefighter, athletic, student, female, overweight, person, chicken, adult, male, criminal, green, homeless, senior, red, pet, duck, cat, unspecified, ceo, animal, monkey, professor, dog, horse, pig]
- audit footer: correct
--finished testing. Result:
All good! :)
Your programs have been compiled successfully :-)
Now, it's your responsibility to test your programs for correctness!
Here are some public test cases, and the results:
============================================
Test for input file: public Test1
Expected results:                                                       Your results:
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- average adult doctor female						- average adult doctor female
- overweight adult unknown male						- overweight adult unknown male
- average baby female							- average baby female
Pedestrians (4)								Pedestrians (4)
- average senior male							- average senior male
- average adult ceo female pregnant					- average adult ceo female pregnant
- athletic child male							- athletic child male
- dog is pet								- dog is pet
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (2)								Passengers (2)
- average adult unknown female pregnant					- average adult unknown female pregnant
- athletic adult criminal male						- athletic adult criminal male
Pedestrians (4)								Pedestrians (4)
- cat is pet								- cat is pet
- bird									- bird
- athletic adult doctor female						- athletic adult doctor female
- average baby male							- average baby male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- overweight senior male						- overweight senior male
Pedestrians (5)								Pedestrians (5)
- athletic child female							- athletic child female
- athletic child male							- athletic child male
- athletic child female							- athletic child female
- athletic child female							- athletic child female
- athletic child male							- athletic child male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
ceo: 1.0								ceo: 1.0
child: 1.0								child: 1.0
criminal: 1.0								criminal: 1.0
dog: 1.0								dog: 1.0
pregnant: 1.0								pregnant: 1.0
athletic: 0.8							     |	athletic: 0.9
female: 0.6								female: 0.6
male: 0.6								male: 0.6
person: 0.6								person: 0.6
								     >	red: 0.6
								     >	green: 0.6
adult: 0.5								adult: 0.5
average: 0.5								average: 0.5
green: 0.5							     <
pet: 0.5							     <
red: 0.5							     <
senior: 0.5								senior: 0.5
unknown: 0.5							     |	pet: 0.5
animal: 0.3								animal: 0.3
baby: 0.0								baby: 0.0
bird: 0.0							     <
cat: 0.0							     <
doctor: 0.0								doctor: 0.0
overweight: 0.0								overweight: 0.0
								     >	bird: 0.0
								     >	cat: 0.0
--									--
average age: 24.6							average age: 24.6
That's all. Press Enter to quit.				     |
								     >	That's all. Press any key to quit.
Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: public Test2
Expected results:                                                       Your results:
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (2)								Passengers (2)
- cat									- cat
- average senior male							- average senior male
Pedestrians (4)								Pedestrians (4)
- cat									- cat
- average adult homeless male						- average adult homeless male
- average adult homeless male						- average adult homeless male
- average adult homeless female pregnant				- average adult homeless female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- average adult criminal male						- average adult criminal male
Pedestrians (5)								Pedestrians (5)
- athletic baby female							- athletic baby female
- cat is pet								- cat is pet
- athletic senior male							- athletic senior male
- average child male							- average child male
- average adult homeless female						- average adult homeless female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- average adult doctor female pregnant					- average adult doctor female pregnant
- ferret								- ferret
- overweight senior female						- overweight senior female
- athletic senior male							- athletic senior male
Pedestrians (4)								Pedestrians (4)
- athletic adult doctor male						- athletic adult doctor male
- athletic child male							- athletic child male
- overweight adult homeless male					- overweight adult homeless male
- dog									- dog
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
baby: 1.0								baby: 1.0
								     >	senior: 1.0
ferret: 1.0								ferret: 1.0
pet: 1.0								pet: 1.0
senior: 1.0							     <
female: 0.8								female: 0.8
animal: 0.6							     |	cat: 0.7
athletic: 0.6								athletic: 0.6
cat: 0.6							     |	animal: 0.6
								     >	green: 0.6
								     >	person: 0.5
average: 0.5								average: 0.5
child: 0.5								child: 0.5
doctor: 0.5								doctor: 0.5
green: 0.5							     <
overweight: 0.5								overweight: 0.5
person: 0.5							     <
pregnant: 0.5								pregnant: 0.5
male: 0.4								male: 0.4
adult: 0.2							     |	adult: 0.3
homeless: 0.2								homeless: 0.2
criminal: 0.0								criminal: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 55.5							average age: 55.5
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (3)								Passengers (3)
- you average adult homeless male					- you average adult homeless male
- overweight adult homeless female					- overweight adult homeless female
- average adult ceo male						- average adult ceo male
Pedestrians (3)								Pedestrians (3)
- athletic adult unknown female						- athletic adult unknown female
- average adult criminal female						- average adult criminal female
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- athletic adult ceo female pregnant					- athletic adult ceo female pregnant
- overweight adult doctor female					- overweight adult doctor female
- average senior male							- average senior male
- athletic adult ceo female pregnant					- athletic adult ceo female pregnant
Pedestrians (4)								Pedestrians (4)
- athletic adult homeless female					- athletic adult homeless female
- average adult homeless male						- average adult homeless male
- average child male							- average child male
- overweight adult unknown male						- overweight adult unknown male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- you average senior female						- you average senior female
Pedestrians (4)								Pedestrians (4)
- athletic adult criminal female pregnant				- athletic adult criminal female pregnant
- overweight adult unknown female pregnant				- overweight adult unknown female pregnant
- overweight adult homeless male					- overweight adult homeless male
- average senior female							- average senior female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 6 RUNS							- % SAVED AFTER 6 RUNS
baby: 1.0								baby: 1.0
								     >	unemployed: 1.0
ferret: 1.0								ferret: 1.0
pet: 1.0								pet: 1.0
unemployed: 1.0							     <
senior: 0.7								senior: 0.7
								     >	child: 0.7
								     >	cat: 0.7
animal: 0.6								animal: 0.6
cat: 0.6							     <
child: 0.6							     <
unknown: 0.6							     <
athletic: 0.5								athletic: 0.5
average: 0.5							     <
female: 0.5								female: 0.5
								     >	average: 0.5
red: 0.5								red: 0.5
you: 0.5								you: 0.5
green: 0.4							     |	green: 0.5
								     >	person: 0.5
male: 0.4								male: 0.4
person: 0.4							     <
adult: 0.3								adult: 0.3
criminal: 0.3								criminal: 0.3
doctor: 0.3								doctor: 0.3
homeless: 0.3								homeless: 0.3
overweight: 0.2							     |	overweight: 0.3
pregnant: 0.2							     |	pregnant: 0.3
ceo: 0.0								ceo: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 46.7						     |	average age: 46.8
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (5)								Passengers (5)
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
- ferret								- ferret
- ferret								- ferret
- ferret is pet								- ferret is pet
Pedestrians (1)								Pedestrians (1)
- athletic senior female						- athletic senior female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- athletic senior male							- athletic senior male
- ferret is pet								- ferret is pet
- average adult criminal female						- average adult criminal female
- overweight adult unemployed female pregnant				- overweight adult unemployed female pregnant
Pedestrians (5)								Pedestrians (5)
- athletic adult ceo male						- athletic adult ceo male
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- ferret								- ferret
- average adult homeless male						- average adult homeless male
- overweight baby male							- overweight baby male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (2)								Passengers (2)
- athletic adult unknown female						- athletic adult unknown female
- overweight senior male						- overweight senior male
Pedestrians (2)								Pedestrians (2)
- average adult unknown male						- average adult unknown male
- overweight adult homeless female					- overweight adult homeless female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 9 RUNS							- % SAVED AFTER 9 RUNS
pet: 1.0								pet: 1.0
ferret: 0.8								ferret: 0.8
								     >	unemployed: 0.8
animal: 0.7								animal: 0.7
unemployed: 0.7							     |	child: 0.7
cat: 0.6							     |	cat: 0.7
child: 0.6							     |	red: 0.7
red: 0.6							     <
senior: 0.6								senior: 0.6
unknown: 0.6							     |	female: 0.6
athletic: 0.5							     <
average: 0.5								average: 0.5
								     >	athletic: 0.5
baby: 0.5								baby: 0.5
criminal: 0.5								criminal: 0.5
doctor: 0.5								doctor: 0.5
female: 0.5							     <
you: 0.5								you: 0.5
								     >	person: 0.5
								     >	green: 0.5
								     >	pregnant: 0.5
adult: 0.4								adult: 0.4
green: 0.4							     |	male: 0.4
person: 0.4							     |	overweight: 0.4
pregnant: 0.4							     <
homeless: 0.3								homeless: 0.3
male: 0.3							     <
overweight: 0.3							     <
ceo: 0.0								ceo: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 44.7						     |	average age: 44.8
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- dog									- dog
- athletic senior male							- athletic senior male
- average senior male							- average senior male
Pedestrians (4)								Pedestrians (4)
- you overweight child female						- you overweight child female
- average adult unemployed male						- average adult unemployed male
- average adult ceo female						- average adult ceo female
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 10 RUNS							- % SAVED AFTER 10 RUNS
pet: 1.0								pet: 1.0
ferret: 0.8								ferret: 0.8
animal: 0.7								animal: 0.7
cat: 0.6							     |	cat: 0.7
red: 0.6							     |	red: 0.7
senior: 0.6								senior: 0.6
unemployed: 0.6								unemployed: 0.6
unknown: 0.6							     <
athletic: 0.5								athletic: 0.5
								     >	female: 0.5
baby: 0.5								baby: 0.5
child: 0.5								child: 0.5
criminal: 0.5								criminal: 0.5
doctor: 0.5								doctor: 0.5
dog: 0.5								dog: 0.5
female: 0.5							     |	average: 0.5
adult: 0.4							     |	green: 0.5
average: 0.4							     |	person: 0.5
green: 0.4							     |	pregnant: 0.5
male: 0.4								male: 0.4
person: 0.4							     |	adult: 0.4
pregnant: 0.4							     <
homeless: 0.3								homeless: 0.3
overweight: 0.3								overweight: 0.3
you: 0.3								you: 0.3
ceo: 0.0								ceo: 0.0
--									--
average age: 48.4							average age: 48.4
That's all. Press Enter to quit.				     |
								     >	That's all. Press any key to quit.
Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: public Test3
Expected results:                                                       Your results:
WARNING: invalid data format in config file in line 3			WARNING: invalid data format in config file in line 3
WARNING: invalid data format in config file in line 22			WARNING: invalid data format in config file in line 22
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- average child male							- average child male
Pedestrians (5)								Pedestrians (5)
- average adult unknown female pregnant					- average adult unknown female pregnant
- overweight adult ceo male						- overweight adult ceo male
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- average senior female							- average senior female
- athletic adult criminal male						- athletic adult criminal male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- overweight adult doctor male						- overweight adult doctor male
Pedestrians (6)								Pedestrians (6)
- you overweight adult homeless female pregnant				- you overweight adult homeless female pregnant
- athletic child female							- athletic child female
- overweight baby male							- overweight baby male
- overweight senior male						- overweight senior male
- overweight adult ceo female pregnant					- overweight adult ceo female pregnant
- dog is pet								- dog is pet
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- you overweight senior male						- you overweight senior male
- overweight adult doctor female pregnant				- overweight adult doctor female pregnant
- average adult homeless female pregnant				- average adult homeless female pregnant
- ferret is pet								- ferret is pet
Pedestrians (6)								Pedestrians (6)
- dog is pet								- dog is pet
- cat is pet								- cat is pet
- athletic child male							- athletic child male
- average adult criminal female pregnant				- average adult criminal female pregnant
- athletic adult homeless female pregnant				- athletic adult homeless female pregnant
- overweight adult unknown female					- overweight adult unknown female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
cat: 1.0								cat: 1.0
child: 0.6							     |	child: 0.7
animal: 0.5							     <
criminal: 0.5								criminal: 0.5
doctor: 0.5								doctor: 0.5
								     >	animal: 0.5
dog: 0.5								dog: 0.5
pet: 0.5								pet: 0.5
unknown: 0.5							     |	green: 0.4
athletic: 0.4								athletic: 0.4
average: 0.4								average: 0.4
green: 0.4							     |	male: 0.4
adult: 0.3								adult: 0.3
homeless: 0.3								homeless: 0.3
male: 0.3							     <
person: 0.3								person: 0.3
female: 0.2							     |	female: 0.3
								     >	pregnant: 0.3
overweight: 0.2								overweight: 0.2
pregnant: 0.2							     <
red: 0.1								red: 0.1
baby: 0.0								baby: 0.0
ceo: 0.0								ceo: 0.0
ferret: 0.0							     <
senior: 0.0								senior: 0.0
unemployed: 0.0								unemployed: 0.0
								     >	ferret: 0.0
you: 0.0								you: 0.0
--									--
average age: 41.0						     |	average age: 41
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- average senior male							- average senior male
Pedestrians (3)								Pedestrians (3)
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
- ferret is pet								- ferret is pet
- athletic senior male							- athletic senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (5)								Passengers (5)
- ferret								- ferret
- athletic child male							- athletic child male
- overweight adult ceo female						- overweight adult ceo female
- average adult doctor female						- average adult doctor female
- average child female							- average child female
Pedestrians (4)								Pedestrians (4)
- ferret								- ferret
- you athletic adult unknown male					- you athletic adult unknown male
- athletic child male							- athletic child male
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- overweight senior female						- overweight senior female
Pedestrians (4)								Pedestrians (4)
- average baby female							- average baby female
- average adult ceo female						- average adult ceo female
- athletic senior male							- athletic senior male
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 6 RUNS							- % SAVED AFTER 6 RUNS
cat: 1.0								cat: 1.0
doctor: 0.7							     |	doctor: 0.8
child: 0.6							     |	child: 0.7
pet: 0.6								pet: 0.6
animal: 0.5							     |	average: 0.6
								     >	animal: 0.6
athletic: 0.5								athletic: 0.5
average: 0.5							     |	green: 0.5
baby: 0.5								baby: 0.5
ceo: 0.5								ceo: 0.5
criminal: 0.5								criminal: 0.5
dog: 0.5							     <
female: 0.5								female: 0.5
								     >	dog: 0.5
ferret: 0.5								ferret: 0.5
green: 0.5							     |	adult: 0.5
adult: 0.4							     |	person: 0.5
								     >	red: 0.5
male: 0.4								male: 0.4
person: 0.4							     <
red: 0.4							     <
homeless: 0.3								homeless: 0.3
pregnant: 0.3							     <
senior: 0.3								senior: 0.3
unknown: 0.3							     |	pregnant: 0.3
overweight: 0.2							     |	overweight: 0.3
unemployed: 0.0								unemployed: 0.0
you: 0.0								you: 0.0
--									--
average age: 43.8						     |	average age: 43.9
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (2)								Passengers (2)
- overweight adult unemployed female pregnant				- overweight adult unemployed female pregnant
- overweight adult unknown male						- overweight adult unknown male
Pedestrians (7)								Pedestrians (7)
- dog									- dog
- average adult criminal female pregnant				- average adult criminal female pregnant
- average adult criminal male						- average adult criminal male
- athletic senior male							- athletic senior male
- average senior female							- average senior female
- overweight adult unknown female pregnant				- overweight adult unknown female pregnant
- average adult unemployed male						- average adult unemployed male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (7)								Passengers (7)
- overweight adult ceo male						- overweight adult ceo male
- ferret is pet								- ferret is pet
- average senior male							- average senior male
- average adult doctor female pregnant					- average adult doctor female pregnant
- dog									- dog
- athletic adult ceo female pregnant					- athletic adult ceo female pregnant
- average adult homeless female						- average adult homeless female
Pedestrians (4)								Pedestrians (4)
- ferret is pet								- ferret is pet
- dog is pet								- dog is pet
- athletic adult unemployed female					- athletic adult unemployed female
- dog									- dog
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (3)								Passengers (3)
- cat is pet								- cat is pet
- ferret is pet								- ferret is pet
- athletic senior male							- athletic senior male
Pedestrians (4)								Pedestrians (4)
- overweight adult unknown female					- overweight adult unknown female
- average child male							- average child male
- athletic senior male							- athletic senior male
- average adult ceo male						- average adult ceo male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 9 RUNS							- % SAVED AFTER 9 RUNS
cat: 1.0								cat: 1.0
criminal: 0.7							     |	criminal: 0.8
pet: 0.7								pet: 0.7
animal: 0.6							     |	animal: 0.7
								     >	dog: 0.7
doctor: 0.6								doctor: 0.6
dog: 0.6							     |	child: 0.6
athletic: 0.5							     |	ferret: 0.6
								     >	athletic: 0.6
average: 0.5								average: 0.5
baby: 0.5							     <
child: 0.5							     <
ferret: 0.5							     <
green: 0.5								green: 0.5
								     >	baby: 0.5
unemployed: 0.5								unemployed: 0.5
								     >	red: 0.5
								     >	female: 0.5
								     >	person: 0.5
adult: 0.4								adult: 0.4
female: 0.4							     <
male: 0.4							     <
person: 0.4							     <
red: 0.4							     <
senior: 0.4								senior: 0.4
pregnant: 0.3							     |	male: 0.4
unknown: 0.3							     |	pregnant: 0.4
ceo: 0.2							     |	ceo: 0.3
homeless: 0.2							     |	homeless: 0.3
overweight: 0.2							     |	overweight: 0.3
you: 0.0								you: 0.0
--									--
average age: 47.7							average age: 47.7
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- dog									- dog
- cat is pet								- cat is pet
- overweight adult ceo female						- overweight adult ceo female
Pedestrians (4)								Pedestrians (4)
- dog is pet								- dog is pet
- overweight senior female						- overweight senior female
- average senior female							- average senior female
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 10 RUNS							- % SAVED AFTER 10 RUNS
cat: 1.0								cat: 1.0
criminal: 0.7							     |	criminal: 0.8
animal: 0.6							     |	animal: 0.7
								     >	pet: 0.7
dog: 0.6								dog: 0.6
pet: 0.6							     |	child: 0.6
								     >	ferret: 0.6
athletic: 0.5								athletic: 0.5
average: 0.5								average: 0.5
baby: 0.5								baby: 0.5
child: 0.5							     <
doctor: 0.5								doctor: 0.5
ferret: 0.5							     <
green: 0.5							     <
unemployed: 0.5								unemployed: 0.5
								     >	green: 0.5
								     >	red: 0.5
								     >	female: 0.5
								     >	person: 0.4
adult: 0.4								adult: 0.4
female: 0.4							     <
male: 0.4								male: 0.4
person: 0.4							     |	ceo: 0.4
red: 0.4							     |	senior: 0.4
ceo: 0.3							     <
pregnant: 0.3								pregnant: 0.3
senior: 0.3							     |	overweight: 0.3
unknown: 0.3							     |	homeless: 0.3
homeless: 0.2							     <
overweight: 0.2							     <
you: 0.0								you: 0.0
--									--
average age: 47.8							average age: 47.8
That's all. Press Enter to quit.				     |
								     >	That's all. Press any key to quit.
Oops, your results seem to be INCORRECT :-(
============================================
src/EthicalEngine.java
10:44:37_Monday_22_June_2020
============================================
/*
  Moral Machine: EthicalEngine.java
  Main script for process management.

  Runfeng Du 900437
 */

import ethicalengine.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class EthicalEngine {
    public enum Decision {PEDESTRIANS, PASSENGERS}
    /**
     * The main method for commandline management
     * @param args commandline arguments
     */
    public static void main(String[] args) {
        boolean isInteractive = false;
        boolean isConfig = false;
        ArrayList<Scenario> configBuffer = new ArrayList<>();
        String resultOutput = "result.log";
        String joinedArgs = String.join(" ",args);
        String[] commandBundle = (" "+ joinedArgs).split(" -");

        for (String s: commandBundle) {
            String[] parameters = s.split(" ");
            try {
                switch (parameters[0]) {
                    case "c":
                    case "-config":
                        // if config path not provided: open help screen & exit
                        if (parameters.length < 2) {
                            helpScreen();
                        } else {
                            ArrayList<String[]> importedFile = new ArrayList<>();
                            try {
                                BufferedReader inputStream = new BufferedReader(new FileReader(parameters[1]));
                                String line = inputStream.readLine();
                                int lineCount = 1;

                                while (line != null) {
                                    // if not the first row: read that row
                                    if (lineCount != 1) {
                                        importedFile.add(line.split(",", -1));
                                    }
                                    lineCount += 1;
                                    line = inputStream.readLine();
                                }
                                inputStream.close();
                                // send imported file to scenario generator
                                ScenarioGenerator generator = new ScenarioGenerator();
                                configBuffer = generator.parseScenario(importedFile);
                                isConfig = true;
                            } catch (FileNotFoundException e) {
                                System.out.println("ERROR: could not find config file.");
                                System.exit(0);
                            } catch (IOException ignored) {
                            }
                        }
                        break;

                    case "h":
                    case "-help":
                        helpScreen();
                        break;

                    case "i":
                    case "-interactive":
                        isInteractive = true;
                        break;

                    case "r":
                    case "-results":
                        if (parameters.length < 2) {
                            helpScreen();
                        }
                        try {
                            new FileReader(parameters[1]);
                        } catch (FileNotFoundException e) {
                            System.out.println("ERROR: could not print results. Target directory does not exist.");
                            System.exit(0);
                        }
                        // input is fine: change save path
                        resultOutput = parameters[1];
                }
            }
            catch (ArrayIndexOutOfBoundsException ignored) {}
        }

        /*
         * Initiate sessions by parameters parsed
         */
        if (isInteractive) {
            // interactive mode
            InteractiveMode interactive = new InteractiveMode(configBuffer, isConfig);
            interactive.setResultPath(resultOutput);
            interactive.run();
        }
        else {
            // normal mode
            boolean response = true;
            Audit audit = new Audit();
            if (isConfig) {
                audit = new Audit(configBuffer);
                audit.run();
                audit.printToFile(resultOutput);
                audit.printStatistic();
            }
            else {
                while (response) {
                    InteractiveMode.welcomeMessage();
                    System.out.println();
                    System.out.println("How many runs do you want?");
                    audit.run(Integer.parseInt(Audit.scannerObject.nextLine()));
                    audit.printToFile(resultOutput);
                    audit.printStatistic();
                    System.out.println("Would you like to continue? (yes/no)");
                    if (!Audit.scannerObject.nextLine().equals("yes")){
                        response = false;
                    }
                }
            }
        }
    }

    /**
     * Decide a scenario (implemented by decision engine)
     * @param scenario a scenario
     * @return decision of survivors
     * @see DecisionEngine
     */
    public static Decision decide(Scenario scenario) {
        return (new DecisionEngine()).decide(scenario);
    }

    /**
     * Display the help screen and exit
     */
    public static void helpScreen() {
        System.out.println("EthicalEngine - COMP90041 - Final Project");
        System.out.println();
        System.out.println("Usage: java EthicalEngine [arguments]");
        System.out.println();
        System.out.println("Arguments:");
        System.out.println("   -c or --config      Optional: path to config file");
        System.out.println("   -h or --help        Print Help (this message) and exit");
        System.out.println("   -r or --results     Optional: path to result log file");
        System.out.println("   -i or --interactive Optional: launches interactive mode");
        System.exit(0);
    }
}

============================================
src/Animal.java
10:44:37_Monday_22_June_2020
============================================
/*
 * Moral Machine: ethicalengine/Animal.java
 * Animals in scenarios.
 *
 * Runfeng Du 900437
 */
package ethicalengine;

public class Animal extends Character{
    enum Species {cat, dog, monkey, pig, duck, chicken, horse}

    private String species;
    private boolean isPet;

    /**
     * Empty constructor
     */
    public Animal() {}

    /**
     * Constructor with species specified
     * @param species species of animal
     */
    public Animal(String species){
        this.setSpecies(species);
    }

    /**
     * Default Constructor
     * @param age age of animal
     * @param species species of animal
     * @param gender gender of animal
     * @param bodytype bodytype of animal
     * @param isPet is the animal pet?
     */
    public Animal(int age, String species, Gender gender, BodyType bodytype, boolean isPet){
        super(age, gender, bodytype);
        this.setSpecies(species);
        this.setPet(isPet);
    }

    /**
     * Copy constructor
     * @param a an animal
     */
    public Animal(Animal a){
        this.species = a.species;
        this.isPet = a.isPet;
    }

    /**
     * Set species of animal
     * @param species species of animal
     */
    public void setSpecies(String species) {
        this.species = species;
    }

    /**
     * Get species of animal
     * @return species of animal
     */
    public String getSpecies() {
        return species;
    }

    /**
     * is the animal pet?
     * @return is pet?
     */
    public boolean isPet() {
        return isPet;
    }

    /**
     * Set the animal as pet/not pet
     * @param isPet is pet?
     */
    public void setPet(boolean isPet) {
        this.isPet = isPet;
    }

    /**
     * Convert animal to string
     * @return a string representing the animal
     */
    public String toString(){
        StringBuilder string = new StringBuilder();
        string.append(species.toLowerCase());
        if (isPet()){
            string.append(" is pet");
        }
        return string.toString();
    }

    /**
     * Is you?
     * @return always false
     */
    public boolean isYou() {
        return false;
    }
}

============================================
src/Person.java
10:44:37_Monday_22_June_2020
============================================
/*
 * Moral Machine: ethicalengine/Person.java
 * Persons in scenarios.
 *
 * Runfeng Du 900437
 */

package ethicalengine;

public class Person extends Character{

    public enum Profession {DOCTOR, CEO, FIREFIGHTER, JANITOR, CRIMINAL, HOMELESS,
        STUDENT, PROFESSOR, UNEMPLOYED, UNKNOWN, NONE}
    public enum AgeCategory {BABY, CHILD, ADULT, SENIOR}

    private Profession profession = Profession.UNKNOWN;
    private boolean isPregnant;
    private boolean isYou;

    /**
     * Empty constructor
     */
    public Person() {}

    /**
     * Default constructor
     * @param age age of person
     * @param profession profession of person
     * @param gender gender of person
     * @param bodytype bodytype of person
     * @param isPregnant is the person pregnant
     */
    public Person(int age, Profession profession, Gender gender,
                  BodyType bodytype, boolean isPregnant) {
        super(age, gender, bodytype);
        this.setProfession(profession);
        this.setPregnant(isPregnant);
    }

    public Person(int age, Gender gender, BodyType bodytype) {
        super(age, gender, bodytype);
        this.setProfession(Profession.UNKNOWN);
        this.setPregnant(false);
    }
    /**
     * Copy constructor
     * @param p a person
     */
    public Person(Person p){
        super(p.getAge(), p.getGender(), p.getBodyType());
        this.profession = p.profession;
        this.isPregnant = p.isPregnant;
        this.isYou = p.isYou;
    }

    /**
     * Get profession of person
     * @return profession of person
     */
    public Profession getProfession() {
        return profession;
    }

    /**
     * Set profession of person
     * @param profession profession of person
     */
    public void setProfession(Profession profession) {
        if (getAgeCategory() == AgeCategory.ADULT){
            this.profession = profession;
        }
        else {
            this.profession = Profession.NONE;
        }
    }

    /**
     * Set profession of person (specified for parseScenario)
     * @param profession profession of person
     * @param lineNumber line count of parsing scenario
     * @throws InvalidCharacteristicException when invalid input received
     * @see ScenarioGenerator
     */
    public void setProfession(String profession, int lineNumber)
            throws InvalidCharacteristicException {
        boolean professionSet = false;
        for (Profession p: Profession.values()) {
            if (p.name().equals(profession.toUpperCase())){
                setProfession(p);
                professionSet = true;
            }
        }
        // if invalid profession name received: alert user & set to unknown
        if (!professionSet && !profession.equals("")){
            setProfession(Profession.UNKNOWN);
            throw new InvalidCharacteristicException(
                    "WARNING: invalid characteristic in config file in line " + lineNumber);
        }
    }

    /**
     * Is the person pregnant
     * @return is pregnant?
     */
    public boolean isPregnant() {
        return isPregnant;
    }

    /**
     * Set the person as pregnant/not pregnant
     * @param isPregnant is pregnant?
     */
    public void setPregnant(boolean isPregnant) {
        if (getGender()==Gender.FEMALE) {
            this.isPregnant = isPregnant;
        }
        else {
            this.isPregnant = false;
        }
    }

    /**
     * Get age category of person
     * @return age category of person
     */
    public AgeCategory getAgeCategory() {
        if (getAge() <= 4) {
            return AgeCategory.BABY;
        }
        else if (getAge() <= 16) {
            return AgeCategory.CHILD;
        }
        else if (getAge() <= 68) {
            return AgeCategory.ADULT;
        }
        else{
            return AgeCategory.SENIOR;
        }
    }

    /**
     * Is the person you?
     * @return is you?
     */
    public boolean isYou() {
        return isYou;
    }

    /**
     * Set the person as you/not you
     * @param isYou is you?
     */
    public void setAsYou(boolean isYou) {
        this.isYou = isYou;
    }

    /**
     * Convert the person to string
     * @return string represents a person
     */
    public String toString() {
        StringBuilder string = new StringBuilder();
        if (isYou()){
            string.append("you ");
        }
        string.append(getBodyType().name().toLowerCase()).append(" ");
        string.append(getAgeCategory().name().toLowerCase()).append(" ");
        if (getAgeCategory()==AgeCategory.ADULT){
            string.append(getProfession().name().toLowerCase()).append(" ");
        }
        string.append(getGender().name().toLowerCase());
        if (isPregnant()){
            string.append(" pregnant");
        }
        return string.toString();
    }
}
============================================
src/ScenarioGenerator.java
10:44:37_Monday_22_June_2020
============================================
/*
 * Moral Machine: ethicalengine/ScenarioGenerator.java
 * Generate scenarios.
 *
 * Runfeng Du 900437
 */
package ethicalengine;

import java.util.ArrayList;
import java.util.Random;
import static ethicalengine.Animal.*;
import static ethicalengine.Person.*;

public class ScenarioGenerator {

    public static class InvalidDataFormatException extends RuntimeException {
        /**
         * Default constructor
         * @param errorMessage the error message
         */
        public InvalidDataFormatException (String errorMessage){
            super(errorMessage);
        }
    }

    private final Random randObj = new Random();
    private int passMax = 5;
    private int passMin = 1;
    private int pedMax = 5;
    private int pedMin = 1;
    Gender[] genders = Gender.values();
    Profession[] professions = Profession.values();
    BodyType[] bodyTypes = BodyType.values();
    Species[] speciesL = Species.values();

    /**
     * Empty constructor
     */
    public ScenarioGenerator() {
        randObj.setSeed(randObj.nextLong());
    }

    /**
     * Constructor with seed specified
     * @param seed seed for random generation
     */
    public ScenarioGenerator(long seed) {
        randObj.setSeed(seed);
    }

    /**
     * Constructor with more specified parameters
     * @param seed seed for random generation
     * @param passMax maximum passengers
     * @param passMin minimum passengers
     * @param pedMax maximum pedestrians
     * @param pedMin minimum pedestrians
     * @throws NumberFormatException when max is smaller than min
     */
    public ScenarioGenerator(long seed, int passMin, int passMax, int pedMin, int pedMax)
            throws NumberFormatException {
        randObj.setSeed(seed);
        if (passMax >= passMin && pedMax >= pedMin){
            setPassengerCountMax(passMax);
            setPassengerCountMin(passMin);
            setPedestrianCountMax(pedMax);
            setPedestrianCountMin(pedMin);
        }
        else{
            throw new NumberFormatException("Minimum value cannot be bigger than maximum value.");
        }
    }

    /**
     * Generate a random person
     * @return a random person
     */
    public Person getRandomPerson() {
        int age = randObj.nextInt(100);
        Gender gender = genders[randObj.nextInt(genders.length)];
        BodyType bodyType = bodyTypes[randObj.nextInt(bodyTypes.length)];

        Profession profession = professions[randObj.nextInt(professions.length-1)];
        boolean isPregnant = (gender == Gender.FEMALE) && (age > 16) && (age <= 68)
                && (randObj.nextInt(10) == 0);

        return new Person(age, profession, gender, bodyType, isPregnant);
    }

    /**
     * Generate a random animal
     * @return a random animal
     */
    public Animal getRandomAnimal() {
        int age = randObj.nextInt(20);
        Gender gender = genders[randObj.nextInt(genders.length)];
        BodyType bodyType = bodyTypes[randObj.nextInt(bodyTypes.length)];
        String species = speciesL[randObj.nextInt(speciesL.length)].toString();
        boolean isPet =  randObj.nextInt(3) == 0;

        return new Animal(age, species, gender, bodyType, isPet);
    }

    /**
     * Generate a random scenario
     * @return a random scenario
     */
    public Scenario generate(){
        int passCount = randObj.nextInt(passMax-passMin+1) + passMin;
        int pedCount = randObj.nextInt(pedMax-pedMin+1) + pedMin;
        int yourPosition = randObj.nextInt(3); // 0: absent, 1: passenger, 2: pedestrian.
        boolean isLegalCrossing = randObj.nextInt(2) == 0;
        ArrayList<Character> passList = new ArrayList<>();
        ArrayList<Character> pedList= new ArrayList<>();

        Person you = getRandomPerson();
        you.setAsYou(true);
        switch (yourPosition){
            case 1:
                passList.add(you);
                passCount -= 1;
                break;

            case 2:
                pedList.add(you);
                pedCount -= 1;
                break;
        }
        // passengers
        for (int i = 0; i < passCount ; i++) {
            passList.add((randObj.nextInt(2) == 0) ? getRandomPerson() : getRandomAnimal());
        }
        // pedestrians
        for (int i = 0; i < pedCount ; i++) {
            pedList.add((randObj.nextInt(2) == 0) ? getRandomPerson() : getRandomAnimal());
        }
        return new Scenario(passList, pedList, isLegalCrossing);
    }

    /**
     * Parse a scenario from config string
     * @param importedFile string of imported configs
     * @return parsed scenario
     */
    public ArrayList<Scenario> parseScenario(ArrayList<String[]> importedFile) {
        int lineCount = 1;
        boolean isGreen = true;
        ArrayList<Character> passengers = new ArrayList<>();
        ArrayList<Character> pedestrians = new ArrayList<>();
        ArrayList<Scenario> scenarios = new ArrayList<>();

        for (String[] line : importedFile) {
            lineCount += 1;
            try {
                if (line.length != 10) {
                    throw new InvalidDataFormatException(
                            "WARNING: invalid data format in config file in line " + lineCount);
                }
                switch (line[0].toLowerCase()){
                    case "person":
                        try {
                            Person person = new Person();
                            person.setGender(line[1], lineCount);
                            person.setAge(line[2], lineCount);
                            person.setBodyType(line[3], lineCount);
                            person.setProfession(line[4], lineCount);
                            person.setPregnant(Boolean.parseBoolean(line[5]));
                            person.setAsYou(Boolean.parseBoolean(line[6]));

                            if (line[9].equals("passenger")) {
                                passengers.add(person);
                            }
                            else {
                                pedestrians.add(person);
                            }
                        }
                        catch (NumberFormatException e) {
                            System.out.println("WARNING: invalid number format in config file in line " + lineCount);
                        }
                        catch (RuntimeException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case "animal":
                        try {
                            Animal animal = new Animal();
                            animal.setGender(line[1],lineCount);
                            animal.setAge(line[2], lineCount);
                            animal.setBodyType(line[3], lineCount);
                            animal.setPet(Boolean.parseBoolean(line[8]));

                            if (!line[7].equals("")) {
                                animal.setSpecies(line[7]);
                            }
                            else {
                                animal.setSpecies("dog");
                            }
                            if (line[9].equals("passenger")) {
                                    passengers.add(animal);
                            }
                            else {
                                pedestrians.add(animal);
                            }
                        }
                        catch (RuntimeException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case "scenario:green":
                    case "scenario:red":
                        if (lineCount != 2) {
                            Scenario s = new Scenario(passengers, pedestrians, isGreen);
                            scenarios.add(s);
                            passengers = new ArrayList<>();
                            pedestrians = new ArrayList<>();
                        }
                        isGreen = line[0].toLowerCase().equals("scenario:green");
                        break;
                }
            }
            catch (RuntimeException e) {
                System.out.println(e.getMessage());
            }
        }
        Scenario s = new Scenario(passengers, pedestrians, isGreen);
        scenarios.add(s);
        return scenarios;
    }

    /**
     * Set maximum passenger
     * @param passMin maximum passenger
     */
    public void setPassengerCountMin(int passMin) {
        this.passMin = passMin;
    }


    /**
     * Set minimum passengers
     * @param passMax minimum passengers
     */
    public void setPassengerCountMax(int passMax) {
        this.passMax = passMax;
    }

    /**
     * Set maximum pedestrians
     * @param pedMax maximum pedestrians
     */
    public void setPedestrianCountMax(int pedMax) {
        this.pedMax = pedMax;
    }

    /**
     * Set minimum pedestrians
     * @param pedMin minimum pedestrians
     */
    public void setPedestrianCountMin(int pedMin) {
        this.pedMin = pedMin;
    }
}
============================================
src/welcome.ascii
10:44:37_Monday_22_June_2020
============================================
                   __-------__
                 / _---------_ \
                / /           \ \
                | |           | |
                |_|___________|_|
            /-\|                 |/-\
           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||
            `--'                 `--'

    $$\      $$\                              $$\                                
    $$$\    $$$ |                             $$ |                               
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                               
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                               
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                               
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                               
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                               
    \__|     \__| \______/ \__|      \_______|\__|                               
    $$\      $$\                     $$\       $$\                               
    $$$\    $$$ |                    $$ |      \__|                              
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$\   $$$$$$$\ 
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$$\ $$  _____|
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$$ |\$$$$$$\  
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   ____| \____$$\ 
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$$\ $$$$$$$  |
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_______|\_______/ 


Welcome to Moral Machines! 
    
The idea of Moral Machines is based on the Trolley Dilemma, a fictional scenario presenting a decision maker with a moral dilemma: choosing ”the lesser of two evils”. The scenario entails an autonomous car whose brakes fail at a pedestrian crossing. As it is too late to relinquish control to the car’s passengers, the car needs to make a decision. Now.

The answers are not straightforward. There are a number of variables at play, which influence how people may feel about the decision: the number of pedestrians or passengers, whether the pedestrians are crossing the street legally, and personal characteristics that our automomous car can somehow infer (people's body tye, profession, gender, age, etc.). This program is a thought experiment, which explores how decisions should be made by auditing algorithms and collecting user feedback. You, the user of this program, will be put into (im)possible situations, left to decide about life and death.============================================
src/Audit.java
10:44:37_Monday_22_June_2020
============================================
/*
 * Moral Machine: Audit.java
 * manages audit sessions.
 *
 * Runfeng Du 900437
 */

import ethicalengine.*;
import ethicalengine.Character;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

public class Audit {
    private String auditType = "Unspecified";
    private final HashMap<String, int[]> statisticsDatabase = new HashMap<>();
    private int runCount = 0;
    private int surviveCount = 0;
    private double ageSum = 0.0;
    private ArrayList<Scenario> scenarioBuffer;
    // a public scanner
    public static Scanner scannerObject = new Scanner(System.in);

    /**
     * Empty constructor
     */
    public Audit() {}

    /**
     * Constructor with scenarios specified
     * @param scenarioSet set of scenarios to be run
     */
    public Audit(ArrayList<Scenario> scenarioSet) {
        scenarioBuffer = scenarioSet;
    }

    /**
     * Manually load scenarios into audit
     * @param scenarioSet set of scenarios to be run
     */
    public void loadScenarios (ArrayList<Scenario> scenarioSet) {
        scenarioBuffer = scenarioSet;
    }

    /**
     * run audit by randomly generated scenarios.
     * @param runs number of audit to be run
     */
    public void run(int runs) {
        ScenarioGenerator generator = new ScenarioGenerator();
        for (int i = 0; i < runs ; i++) {
            Scenario scenario = generator.generate();
            EthicalEngine.Decision result = EthicalEngine.decide(scenario);
            this.updateStatistics(scenario, result);
            runCount += 1;
        }
    }

    /**
     * Run audit by imported scenarios.
     */
    public void run() {
        for (Scenario s: scenarioBuffer) {
            EthicalEngine.Decision result = EthicalEngine.decide(s);
            this.updateStatistics(s, result);
            runCount += 1;
        }
    }

    /**
     * Run audit in interactive mode
     */
    public void interactiveRun() {
        for (Scenario s: scenarioBuffer) {
            EthicalEngine.Decision decision = EthicalEngine.Decision.PASSENGERS;
            boolean decisionMade = false;

            System.out.print(s.toString());
            while (!decisionMade){
                System.out.println();
                System.out.println("Who should be saved? (passenger(s) [1] or pedestrian(s) [2])");
                switch (scannerObject.nextLine()){
                    case "passenger":
                    case "passengers":
                    case "1":
                        decision = EthicalEngine.Decision.PASSENGERS;
                        decisionMade = true;
                        break;

                    case "pedestrian":
                    case "pedestrians":
                    case "2":
                        decision = EthicalEngine.Decision.PEDESTRIANS;
                        decisionMade = true;
                        break;

                    default:
                        System.out.print("Invalid response. ");
                        break;
                }
            }
            this.updateStatistics(s, decision);
            runCount += 1;
        }
        // clear buffer
        scenarioBuffer = new ArrayList<>();
    }

    /**
     * get audit type
     * @return the audit type
     */
    public String getAuditType() {
        return auditType;
    }

    /**
     * Set audit type
     * @param auditType the audit type
     */
    public void setAuditType(String auditType) {
        this.auditType = auditType;
    }

    private void updateStatistics(Scenario scenario, EthicalEngine.Decision decision) {
        ArrayList<Character> survivors = (decision ==
                EthicalEngine.Decision.PASSENGERS) ?
                scenario.getPassengersList() : scenario.getPedestriansList();
        ArrayList<Character> sacrifices = (decision ==
                EthicalEngine.Decision.PASSENGERS) ?
                scenario.getPedestriansList() : scenario.getPassengersList();
        //survivors
        for (Character c: survivors) {
            characterUpdate(c, 1, scenario.isLegalCrossing());
        }
        //sacrifices
        for (Character c: sacrifices) {
            characterUpdate(c,0, scenario.isLegalCrossing());
        }

    }

    private void entryUpdate(String key, int modifier) {
        if (!key.equals("UNKNOWN") && !key.equals("NONE")){
            statisticsDatabase.putIfAbsent(key, new int[]{0, 0});
            int[] entry = statisticsDatabase.get(key);
            statisticsDatabase.replace(key, new int[]{entry[0]+1, entry[1]+modifier});
        }
    }

    private void characterUpdate(Character c, int modifier, boolean isLegalCrossing) {
        entryUpdate(isLegalCrossing? "green": "red", modifier);
        if (c instanceof Person) {
            if (modifier == 1){
                ageSum += c.getAge();
                surviveCount += 1;
            }
            entryUpdate(c.getBodyType().name(), modifier);
            entryUpdate(c.getGender().name(), modifier);
            entryUpdate(((Person) c).getProfession().name(), modifier);
            entryUpdate(((Person) c).getAgeCategory().name(), modifier);
            entryUpdate("person", modifier);
            if ((c).isYou()){
                entryUpdate("you", modifier);
            }
            if (((Person) c).isPregnant()){
                entryUpdate("pregnant", modifier);
            }
        }
        else if (c instanceof Animal) {
            entryUpdate(((Animal) c).getSpecies(), modifier);
            entryUpdate("animal", modifier);
            if (((Animal) c).isPet()){
                entryUpdate("pet", modifier);
            }
        }
    }

    /**
     * Convert audit statistics to string
     * @return string representing an audit
     */
    public String toString() {
        StringBuilder string = new StringBuilder();
        string.append("======================================\n");
        string.append("# ").append(getAuditType()).append(" Audit\n");
        string.append("======================================\n");
        string.append("- % SAVED AFTER ").append(runCount).append(" RUNS\n");

        // sort database by survival rate.
        ArrayList <String[]> sortedDatabase = new ArrayList<>();
        for (String key:statisticsDatabase.keySet()) {
            int[] entry = statisticsDatabase.get(key);
            double survivalRate = (double)entry[1]/(double) entry[0];
            sortedDatabase.add(new String[]{key, String.valueOf(survivalRate)});
        }
        //sortedDatabase.sort(Comparator.comparingDouble(o -> -1 * Double.parseDouble(o[1])));
        sortedDatabase.sort(Comparator.comparing((String[] o) -> -1 * Double.parseDouble(o[1]))
                .thenComparing(o -> o[0]));

        for (String[] s: sortedDatabase) {
            string.append(s[0].toLowerCase()).append(": ")
                    .append(String.format("%.1f", Double.parseDouble(s[1])))
                    .append("\n");
        }
        string.append("--\n");
        string.append("average age: ").append(new DecimalFormat("#.#")
                .format(ageSum/surviveCount)).append("\n");
        return string.toString();
    }

    /**
     * Print statistics out
     */
    public void printStatistic() {
        System.out.println(toString());
    }

    /**
     * Print statistics to file
     * @param path path of file output
     */
    public void printToFile(String path) {
        try {
            PrintWriter outputStream = new PrintWriter(new FileOutputStream(path, true));
            outputStream.println(toString());
            outputStream.close();
        }
        catch (FileNotFoundException e) {
            System.out.println(
                    "ERROR: could not print results. Target directory does not exist.");
        }
    }
}============================================
src/ethicalengine.txt
10:44:37_Monday_22_June_2020
============================================
Animal.java
Character.java
Person.java
Scenario.java
ScenarioGenerator.java
============================================
src/Scenario.java
10:44:37_Monday_22_June_2020
============================================
/*
 * Moral Machine: ethicalengine/Scenario.java
 * Scenarios to be judged.
 *
 * Runfeng Du 900437
 */
package ethicalengine;

import java.util.ArrayList;
import java.util.Arrays;

public class Scenario {
    private final ArrayList<Character> passengers;
    private final ArrayList<Character> pedestrians;
    private boolean isLegalCrossing;

    /**
     * Default constructor (Array input)
     * @param passengers Array of passengers
     * @param pedestrians Array of pedestrians
     * @param isLegalCrossing is crossing at green light
     */
    public Scenario(Character[] passengers, Character[] pedestrians,
                    boolean isLegalCrossing){
        this.passengers = new ArrayList<>(Arrays.asList(passengers));
        this.pedestrians = new ArrayList<>(Arrays.asList(pedestrians));
        setLegalCrossing(isLegalCrossing);
    }

    /**
     * Default constructor (ArrayList input)
     * @param passengers ArrayList of passengers
     * @param pedestrians ArrayList of pedestrians
     * @param isLegalCrossing is crossing at green light
     */
    public Scenario(ArrayList<Character> passengers, ArrayList<Character> pedestrians,
                    boolean isLegalCrossing){
        this.passengers = passengers;
        this.pedestrians = pedestrians;
        setLegalCrossing(isLegalCrossing);
    }

    /**
     * Get passengers
     * @return ArrayList of passengers
     */
    public ArrayList<Character> getPassengersList() {
        return passengers;
    }

    /**
     * Get pedestrians
     * @return ArrayList of pedestrians
     */
    public ArrayList<Character> getPedestriansList() {
        return pedestrians;
    }

    /**
     * Get pedestrians
     * @return Array of pedestrians
     */
    public Character[] getPedestrians() {
        return pedestrians.toArray(new Character[0]);
    }

    /**
     * Get pedestrians
     * @return Array of pedestrians
     */
    public Character[] getPassengers() {
        return passengers.toArray(new Character[0]);
    }

    /**
     * Is you in car
     * @return Is you in car
     */
    public boolean hasYouInCar() {
        for (Character c: getPassengersList()) {
            if (c.isYou()){
                return true;
            }
        }
        return false;
    }

    /**
     * Is you in lane
     * @return Is you in lane
     */
    public boolean hasYouInLane() {
        for (Character c: getPedestriansList()) {
            if (c.isYou()){
                return true;
            }
        }
        return false;
    }

    /**
     * Is legal crossing
     * @return Is legal crossing
     */
    public boolean isLegalCrossing() {
        return isLegalCrossing;
    }

    /**
     * Set legal crossing
     * @param isLegalCrossing Is legal crossing
     */
    public void setLegalCrossing(boolean isLegalCrossing) {
        this.isLegalCrossing = isLegalCrossing;
    }

    /**
     * Count passengers
     * @return passenger count
     */
    public int getPassengerCount() {
        return getPassengersList().size();
    }

    /**
     * Count pedestrians
     * @return pedestrian count
     */
    public int getPedestrianCount() {
        return getPedestriansList().size();
    }

    /**
     * Convert scenario to string
     * @return String representing the scenario
     */
    public String toString() {
        StringBuilder string = new StringBuilder();
        string.append("======================================\n" +
                "# Scenario\n======================================\n");
        string.append("Legal Crossing: ").append((isLegalCrossing) ? "yes\n" : "no\n");
        string.append("Passengers (").append(getPassengerCount()).append(")\n");
        for (Character c: passengers) {
            string.append("- ").append(c.toString()).append("\n");
        }
        string.append("Pedestrians (").append(getPedestrianCount()).append(")\n");
        for (Character c: pedestrians) {
            string.append("- ").append(c.toString()).append("\n");
        }
        string.deleteCharAt(string.lastIndexOf("\n"));
        return string.toString();
    }
}
============================================
src/Character.java
10:44:37_Monday_22_June_2020
============================================
/*
 * Moral Machine: ethicalengine/Character.java
 * Characters in scenarios.
 *
 * Runfeng Du 900437
 */
package ethicalengine;

public abstract class Character {

    public static class InvalidCharacteristicException extends RuntimeException {
        /**
         * Default constructor
         * @param errorMessage the error message
         */
        public InvalidCharacteristicException(String errorMessage) {
            super(errorMessage);
        }
    }

    public enum Gender {MALE, FEMALE, UNKNOWN}
    public enum BodyType {AVERAGE, ATHLETIC, OVERWEIGHT, UNSPECIFIED}

    private int age;
    private Gender gender = Gender.UNKNOWN;
    private BodyType bodyType = BodyType.UNSPECIFIED;

    /**
     * Empty constructor
     */
    public Character() {}

    /**
     * Default constructor
     * @param age age of character
     * @param gender gender of character
     * @param bodyType body type of character
     */
    public Character(int age, Gender gender, BodyType bodyType) {
        try {
            this.setAge(age);
            this.setGender(gender);
            this.setBodyType(bodyType);
        }
        catch (RuntimeException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Copy constructor
     * @param c a character
     */
    public Character(Character c) {
        this.age = c.age;
        this.gender = c.gender;
        this.bodyType = c.bodyType;
    }

    /**
     * Get age of character
     * @return age of character
     */
    public int getAge(){
        return this.age;
    }

    /**
     * Set age of character
     * @param age age of character (int)
     * @throws NumberFormatException when invalid age received
     */
    public void setAge(int age) throws NumberFormatException {
        if (age>=0) {
            this.age = age;
        }
        else{
            throw new NumberFormatException("Invalid input: age must be positive");
        }
    }

    /**
     * Set age of character (specified for parseScenario)
     * @param age age of character (int)
     * @param lineCount line count of parsing scenario
     * @throws NumberFormatException when invalid input received
     * @see ScenarioGenerator
     */
    public void setAge(String age, int lineCount) throws NumberFormatException {
        try {
            setAge(Integer.parseInt(age));
        }
        catch (java.lang.NumberFormatException e) {
            System.out.println("WARNING: invalid number format in config file in line " + lineCount);
            setAge(25);
        }
    }

    /**
     * Get gender of character
     * @return gender of character
     */
    public Gender getGender(){
        return this.gender;
    }

    /**
     * Set gender of character
     * @param gender gender of character
     */
    public void setGender(Gender gender) {
        this.gender = gender;
    }

    /**
     * Set gender of character (specified for parseScenario)
     * @param gender gender of character
     * @param lineNumber line count of parsing scenario
     * @throws InvalidCharacteristicException when invalid input received
     * @see ScenarioGenerator
     */
    public void setGender(String gender, int lineNumber)
            throws InvalidCharacteristicException {
        if (gender.toLowerCase().equals("female")){
            this.gender = Gender.FEMALE;
        }
        else if (gender.toLowerCase().equals("male")){
            this.gender = Gender.MALE;
        }
        else {
            this.gender = Gender.UNKNOWN;
            if (!gender.equals("")){
                throw new InvalidCharacteristicException(
                        "WARNING: invalid characteristic in config file in line " + lineNumber);
            }
        }
    }

    /**
     * Get body type of character
     * @return body type of character
     */
    public BodyType getBodyType() {
        return bodyType;
    }

    /**
     * Set body type of character
     * @param bodyType body type of character
     */
    public void setBodyType(BodyType bodyType) {
        this.bodyType = bodyType;
    }

    /**
     * Set body type of character (specified for parseScenario)
     * @param bodyType body type of character
     * @param lineNumber line count of parsing scenario
     * @throws InvalidCharacteristicException when invalid input received
     */
    public void setBodyType(String bodyType, int lineNumber)
            throws InvalidCharacteristicException {
        boolean bodyTypeSet = false;
        for (BodyType b: BodyType.values()) {
            if (b.name().equals(bodyType.toUpperCase())){
                this.bodyType = b;
                bodyTypeSet = true;
            }
        }
        if (!bodyTypeSet && !bodyType.equals("")){
            this.bodyType = BodyType.UNSPECIFIED;
            throw new InvalidCharacteristicException(
                    "WARNING: invalid characteristic in config file in line " + lineNumber);
        }
    }

    /**
     * Convert character to string
     * @return string represents a character
     * @see Person
     * @see Animal
     */
    public abstract String toString();

    /**
     * Is the character you
     * @return is you?
     * @see Person
     * @see Animal
     */
    public abstract boolean isYou();
}


============================================
src/InteractiveMode.java
10:44:37_Monday_22_June_2020
============================================
/*
 * Moral Machine: InteractiveMode.java
 * Manages interactive sessions
 *
 * Runfeng Du 900437
 */

import ethicalengine.Scenario;
import ethicalengine.ScenarioGenerator;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class InteractiveMode {
    private ArrayList<Scenario> configs = new ArrayList<>();
    private boolean configMode = false;
    private boolean saveToFile = false;
    private String resultPath = "result.log";

    /**
     * Empty constructor
     */
    public InteractiveMode() {}

    /**
     * Constructor with configs provided
     * @param configs configs of scenarios
     * @param isConfig is config provided
     */
    public InteractiveMode(ArrayList<Scenario> configs, boolean isConfig) {
        this.configs = configs;
        configMode = isConfig;
    }

    /**
     * Query for file saving consent
     */
    private void setConsent() {
        boolean consentSet = false;
        while (!consentSet){
            System.out.println("Do you consent to have your decisions saved to a file? (yes/no)");
            String commandReceived = Audit.scannerObject.nextLine();
            if (commandReceived.equals("yes")){
                saveToFile = true;
                consentSet = true;
            }
            else if (commandReceived.equals("no")){
                saveToFile = false;
                consentSet = true;
            }
            else {
                System.out.print("Invalid response.");
            }
        }
    }

    /**
     * Display welcome messages
     */
    public static void welcomeMessage() {
        try {
            BufferedReader inputStream = new BufferedReader(new FileReader("welcome.ascii"));
            String line = inputStream.readLine();
            while (line != null){
                System.out.println(line);
                line = inputStream.readLine();
            }
            inputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void runAudit(Audit audit, ArrayList<Scenario> config) {
        audit.loadScenarios(config);
        audit.interactiveRun();
        audit.printStatistic();
        if (saveToFile){
            audit.printToFile(resultPath);
        }
    }

    /**
     * Start the interactive mode
     */
    public void run() {
        welcomeMessage();
        setConsent();
        Audit audit = new Audit();
        audit.setAuditType("User");

        if (!configMode) {
            ScenarioGenerator generator = new ScenarioGenerator();
            for (int i = 0; i < 3; i++) {
                configs.add(generator.generate());
            }
        }
        if (configs.size() <= 3){
            if (configMode) {
                runAudit(audit, configs);
            } else {
                boolean response = true;
                while (response){
                    configs = new ArrayList<>();
                    ScenarioGenerator generator = new ScenarioGenerator();
                    for (int i = 0; i < 3; i++) {
                        configs.add(generator.generate());
                    }
                    runAudit(audit, configs);
                    System.out.print("Would you like to continue? (yes/no)");
                    String commandReceived = Audit.scannerObject.nextLine();
                    if (!commandReceived.equals("yes")){
                        response = false;
                    }
                }
            }
        }
        else {
            for (int i = 0; i < configs.size()/3; i++) {
                ArrayList<Scenario> configSlice = new ArrayList<>(configs.subList(3*i, 3*i+3));
                runAudit(audit, configSlice);
                System.out.println("Would you like to continue? (yes/no)");
                String commandReceived = Audit.scannerObject.nextLine();
                if (!commandReceived.equals("yes")){
                    break;
                }
            }
            if (configs.size()%3>0){
                ArrayList<Scenario> configSlice = new ArrayList<>(configs.subList(3*(configs.size()/3),
                        3*(configs.size()/3) + configs.size()%3));
                runAudit(audit, configSlice);
            }
        }
        System.out.println("That's all. Press any key to quit.");
        Audit.scannerObject.nextLine();
        System.exit(0);
    }

    /**
     * Set path of file saving
     * @param resultPath path for file saving
     */
    public void setResultPath(String resultPath) {
        this.resultPath = resultPath;
    }

    /**
     * Get path of file saving
     * @return path of file saving
     */
    public String getResultPath() {
        return resultPath;
    }
}
============================================
src/DecisionEngine.java
10:44:37_Monday_22_June_2020
============================================
/*
 * Moral Machine: ethicalengine/DecisionEngine.java
 * The engine to make decisions.
 *
 * Runfeng Du 900437
 */

import ethicalengine.Animal;
import ethicalengine.Character;
import ethicalengine.Person;
import ethicalengine.Scenario;
import java.util.HashMap;
import static ethicalengine.Character.BodyType.*;
import static ethicalengine.Person.AgeCategory.*;
import static ethicalengine.Person.Profession.*;

public class DecisionEngine {

    /*
     * Merits of characteristics
     */
    final HashMap<Person.Profession, Double> professionMerit =
            new HashMap<Person.Profession, Double>() {
        { put(CEO, 1.0);
          put(CRIMINAL, 0.5);
          put(DOCTOR, 1.5);
          put(FIREFIGHTER, 1.5);
          put(JANITOR, 1.0);
          put(HOMELESS, 0.7);
          put(UNEMPLOYED, 1.0);
          put(STUDENT, 1.1);
          put(PROFESSOR, 1.1);
          put(Person.Profession.UNKNOWN, 1.0);
          put(NONE, 1.0);
          put(null, 1.0);
        }
    };
    final HashMap<Person.AgeCategory, Double> ageTypeMerit =
            new HashMap<Person.AgeCategory, Double>() {
        { put(BABY, 3.0);
          put(CHILD, 2.5);
          put(ADULT, 1.0);
          put(SENIOR, 0.8);
          put(null, 1.0);
        }
    };
    final HashMap<Character.BodyType, Double> bodyTypeMerit =
            new HashMap<Character.BodyType, Double>() {
        { put(AVERAGE, 1.0);
          put(ATHLETIC, 1.05);
          put(OVERWEIGHT, 0.95);
          put(UNSPECIFIED, 1.0);
          put(null, 1.0);
        }
    };
    final double illegalCrossingDemerit = 0.7;
    final double pregnantMerit = 3.0;
    final double animalMerit = 0.01;
    final double petMerit = 20.0;
    final double youMerit = 2.0;

    /**
     * Make a decision on a scenario
     * @param scenario a scenario
     * @return decision
     */
    public EthicalEngine.Decision decide(Scenario scenario){
        double passengerRating = 0;
        double pedestrianRating = 0;

        for (Character c : scenario.getPassengersList()) {
            passengerRating += rateCharacter(c);
        }
        for (Character c: scenario.getPedestriansList()) {
            pedestrianRating += rateCharacter(c);
        }
        if (!scenario.isLegalCrossing()){
            pedestrianRating = pedestrianRating * illegalCrossingDemerit;
        }
        return (passengerRating > pedestrianRating) ?
                EthicalEngine.Decision.PASSENGERS : EthicalEngine.Decision.PEDESTRIANS;
    }

    /**
     * Rate characters
     * @param c a character
     * @return rating
     */
    public double rateCharacter(Character c) {
        if (c instanceof Person) {
            return professionMerit.get(((Person) c).getProfession()) *
                    ageTypeMerit.get(((Person) c).getAgeCategory()) *
                    bodyTypeMerit.get(c.getBodyType()) *
                    ((((Person) c).isPregnant()) ? pregnantMerit : 1.0) *
                    (c.isYou() ? youMerit : 1.0);
        }
        if (c instanceof Animal) {
            return animalMerit * (((Animal) c).isPet()? petMerit : 1.0);
        }
        return 0;
    }
}
