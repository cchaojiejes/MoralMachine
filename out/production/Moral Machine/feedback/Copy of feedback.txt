============================================
vis/result.rtx
14:43:41_Sunday_21_June_2020
============================================
Feedback:
Your programs ("EthicalEngine.java" ) have been submitted successfully. 
Compiling your programs with "javac"...
./ScenarioGenerator.java:14: error: duplicate class: ethicalengine.ScenarioGenerator
public class ScenarioGenerator {
       ^
TestAudit.java:14: error: cannot access ScenarioGenerator
    ScenarioGenerator scenarioGenerator;
    ^
  bad source file: ./ScenarioGenerator.java
    file does not contain class ScenarioGenerator
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.
============================================
Here are our Junit tests for you:
Fix these errors and resubmit your programs!
============================================
src/ethicalengine.txt
14:43:40_Sunday_21_June_2020
============================================
Animal.java
Character.java
Person.java
Scenario.java
ScenarioGenerator.java============================================
src/Scenario.java
14:43:40_Sunday_21_June_2020
============================================
/*
 * Moral Machine: ethicalengine/Scenario.java
 * Scenarios to be judged.
 *
 * Runfeng Du 900437
 */
package ethicalengine;

import java.util.ArrayList;
import java.util.Arrays;

public class Scenario {
    private final ArrayList<Character> passengers;
    private final ArrayList<Character> pedestrians;
    private boolean isLegalCrossing;

    /**
     * Default constructor (Array input)
     * @param passengers Array of passengers
     * @param pedestrians Array of pedestrians
     * @param isLegalCrossing is crossing at green light
     */
    public Scenario(Character[] passengers, Character[] pedestrians,
                    boolean isLegalCrossing){
        this.passengers = new ArrayList<>(Arrays.asList(passengers));
        this.pedestrians = new ArrayList<>(Arrays.asList(pedestrians));
        setLegalCrossing(isLegalCrossing);
    }

    /**
     * Default constructor (ArrayList input)
     * @param passengers ArrayList of passengers
     * @param pedestrians ArrayList of pedestrians
     * @param isLegalCrossing is crossing at green light
     */
    public Scenario(ArrayList<Character> passengers, ArrayList<Character> pedestrians,
                    boolean isLegalCrossing){
        this.passengers = passengers;
        this.pedestrians = pedestrians;
        setLegalCrossing(isLegalCrossing);
    }

    /**
     * Get passengers
     * @return ArrayList of passengers
     */
    public ArrayList<Character> getPassengers() {
        return passengers;
    }

    /**
     * Get pedestrians
     * @return ArrayList of pedestrians
     */
    public ArrayList<Character> getPedestrians() {
        return pedestrians;
    }

    /**
     * Is you in car
     * @return Is you in car
     */
    public boolean hasYouInCar() {
        for (Character c: getPassengers()) {
            if (c.isYou()){
                return true;
            }
        }
        return false;
    }

    /**
     * Is you in lane
     * @return Is you in lane
     */
    public boolean hasYouInLane() {
        for (Character c: getPedestrians()) {
            if (c.isYou()){
                return true;
            }
        }
        return false;
    }

    /**
     * Is legal crossing
     * @return Is legal crossing
     */
    public boolean isLegalCrossing() {
        return isLegalCrossing;
    }

    /**
     * Set legal crossing
     * @param isLegalCrossing Is legal crossing
     */
    public void setLegalCrossing(boolean isLegalCrossing) {
        this.isLegalCrossing = isLegalCrossing;
    }

    /**
     * Count passengers
     * @return passenger count
     */
    public int getPassengerCount() {
        return getPassengers().size();
    }

    /**
     * Count pedestrians
     * @return pedestrian count
     */
    public int getPedestrianCount() {
        return getPedestrians().size();
    }

    /**
     * Convert scenario to string
     * @return String representing the scenario
     */
    public String toString() {
        StringBuilder string = new StringBuilder();
        string.append("======================================\n" +
                "# Scenario\n======================================\n");
        string.append("Legal Crossing: ").append((isLegalCrossing) ? "yes\n" : "no\n");
        string.append("Passengers (").append(getPassengerCount()).append(")\n");
        for (Character c: passengers) {
            string.append("- ").append(c.toString()).append("\n");
        }
        string.append("Pedestrians (").append(getPedestrianCount()).append(")\n");
        for (Character c: pedestrians) {
            string.append("- ").append(c.toString()).append("\n");
        }
        return string.toString();
    }
}
============================================
src/ScenarioGenerator.java
14:43:40_Sunday_21_June_2020
============================================
/*
 * Moral Machine: ethicalengine/ScenarioGenerator.java
 * Generate scenarios.
 *
 * Runfeng Du 900437
 */
package ethicalengine;

import java.util.ArrayList;
import java.util.Random;
import static ethicalengine.Animal.*;
import static ethicalengine.Person.*;

public class ScenarioGenerator {

    public static class InvalidDataFormatException extends RuntimeException {
        /**
         * Default constructor
         * @param errorMessage the error message
         */
        public InvalidDataFormatException (String errorMessage){
            super(errorMessage);
        }
    }

    private final Random randObj = new Random();
    private int passMax = 5;
    private int passMin = 1;
    private int pedMax = 5;
    private int pedMin = 1;
    Gender[] genders = Gender.values();
    Profession[] professions = Profession.values();
    BodyType[] bodyTypes = BodyType.values();
    Species[] speciesL = Species.values();

    /**
     * Empty constructor
     */
    public ScenarioGenerator() {
        randObj.setSeed(randObj.nextLong());
    }

    /**
     * Constructor with seed specified
     * @param seed seed for random generation
     */
    public ScenarioGenerator(long seed) {
        randObj.setSeed(seed);
    }

    /**
     * Constructor with more specified parameters
     * @param seed seed for random generation
     * @param passMax maximum passengers
     * @param passMin minimum passengers
     * @param pedMax maximum pedestrians
     * @param pedMin minimum pedestrians
     * @throws NumberFormatException when max is smaller than min
     */
    public ScenarioGenerator(long seed, int passMax, int passMin, int pedMax, int pedMin)
            throws NumberFormatException {
        randObj.setSeed(seed);
        if (passMax >= passMin && pedMax >= pedMin){
            setPassMax(passMax);
            setPassMin(passMin);
            setPedMax(pedMax);
            setPedMin(pedMin);
        }
        else{
            throw new NumberFormatException("Minimum value cannot be bigger than maximum value.");
        }
    }

    /**
     * Generate a random person
     * @return a random person
     */
    public Person getRandomPerson() {
        int age = randObj.nextInt(100);
        Gender gender = genders[randObj.nextInt(genders.length)];
        BodyType bodyType = bodyTypes[randObj.nextInt(bodyTypes.length)];

        Profession profession = professions[randObj.nextInt(professions.length-1)];
        boolean isPregnant = (gender == Gender.FEMALE) && (age > 16) && (age <= 68)
                && (randObj.nextInt(10) == 0);

        return new Person(age, profession, gender, bodyType, isPregnant);
    }

    /**
     * Generate a random animal
     * @return a random animal
     */
    public Animal getRandomAnimal() {
        int age = randObj.nextInt(20);
        Gender gender = genders[randObj.nextInt(genders.length)];
        BodyType bodyType = bodyTypes[randObj.nextInt(bodyTypes.length)];
        String species = speciesL[randObj.nextInt(speciesL.length)].toString();
        boolean isPet =  randObj.nextInt(3) == 0;

        return new Animal(age, species, gender, bodyType, isPet);
    }

    /**
     * Generate a random scenario
     * @return a random scenario
     */
    public Scenario generate(){
        int passCount = randObj.nextInt(passMax-passMin+1) + passMin;
        int pedCount = randObj.nextInt(pedMax-pedMin+1) + pedMin;
        int yourPosition = randObj.nextInt(3); // 0: absent, 1: passenger, 2: pedestrian.
        boolean isLegalCrossing = randObj.nextInt(2) == 0;
        ArrayList<Character> passList = new ArrayList<>();
        ArrayList<Character> pedList= new ArrayList<>();

        Person you = getRandomPerson();
        you.setAsYou(true);
        switch (yourPosition){
            case 1:
                passList.add(you);
                passCount -= 1;
                break;

            case 2:
                pedList.add(you);
                pedCount -= 1;
                break;
        }
        // passengers
        for (int i = 0; i < passCount ; i++) {
            passList.add((randObj.nextInt(2) == 0) ? getRandomPerson() : getRandomAnimal());
        }
        // pedestrians
        for (int i = 0; i < pedCount ; i++) {
            pedList.add((randObj.nextInt(2) == 0) ? getRandomPerson() : getRandomAnimal());
        }
        return new Scenario(passList, pedList, isLegalCrossing);
    }

    /**
     * Parse a scenario from config string
     * @param importedFile string of imported configs
     * @return parsed scenario
     */
    public ArrayList<Scenario> parseScenario(ArrayList<String[]> importedFile) {
        int lineCount = 1;
        boolean isGreen = true;
        ArrayList<Character> passengers = new ArrayList<>();
        ArrayList<Character> pedestrians = new ArrayList<>();
        ArrayList<Scenario> scenarios = new ArrayList<>();

        for (String[] line : importedFile) {
            lineCount += 1;
            try {
                if (line.length != 10) {
                    throw new InvalidDataFormatException(
                            "WARNING: invalid data format in config file in line " + lineCount);
                }
                switch (line[0].toLowerCase()){
                    case "person":
                        try {
                            Person person = new Person();
                            person.setGender(line[1], lineCount);
                            person.setAge(line[2], lineCount);
                            person.setBodyType(line[3], lineCount);
                            person.setProfession(line[4], lineCount);
                            person.setPregnant(Boolean.parseBoolean(line[5]));
                            person.setAsYou(Boolean.parseBoolean(line[6]));

                            if (line[9].equals("passenger")) {
                                passengers.add(person);
                            }
                            else {
                                pedestrians.add(person);
                            }
                        }
                        catch (NumberFormatException e) {
                            System.out.println("WARNING: invalid number format in config file in line " + lineCount);
                        }
                        catch (RuntimeException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case "animal":
                        try {
                            Animal animal = new Animal();
                            animal.setGender(line[1],lineCount);
                            animal.setAge(line[2], lineCount);
                            animal.setBodyType(line[3], lineCount);
                            animal.setPet(Boolean.parseBoolean(line[8]));

                            if (!line[7].equals("")) {
                                animal.setSpecies(line[7]);
                            }
                            else {
                                animal.setSpecies("dog");
                            }
                            if (line[9].equals("passenger")) {
                                    passengers.add(animal);
                            }
                            else {
                                pedestrians.add(animal);
                            }
                        }
                        catch (RuntimeException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case "scenario:green":
                    case "scenario:red":
                        if (lineCount != 2) {
                            Scenario s = new Scenario(passengers, pedestrians, isGreen);
                            scenarios.add(s);
                            passengers = new ArrayList<>();
                            pedestrians = new ArrayList<>();
                        }
                        isGreen = line[0].toLowerCase().equals("scenario:green");
                        break;
                }
            }
            catch (RuntimeException e) {
                System.out.println(e.getMessage());
            }
        }
        Scenario s = new Scenario(passengers, pedestrians, isGreen);
        scenarios.add(s);
        return scenarios;
    }

    /**
     * Set maximum passenger
     * @param passMin maximum passenger
     */
    public void setPassMin(int passMin) {
        this.passMin = passMin;
    }


    /**
     * Set minimum passengers
     * @param passMax minimum passengers
     */
    public void setPassMax(int passMax) {
        this.passMax = passMax;
    }

    /**
     * Set maximum pedestrians
     * @param pedMax maximum pedestrians
     */
    public void setPedMax(int pedMax) {
        this.pedMax = pedMax;
    }

    /**
     * Set minimum pedestrians
     * @param pedMin minimum pedestrians
     */
    public void setPedMin(int pedMin) {
        this.pedMin = pedMin;
    }
}
============================================
src/welcome.ascii
14:43:40_Sunday_21_June_2020
============================================
                   __-------__
                 / _---------_ \
                / /           \ \
                | |           | |
                |_|___________|_|
            /-\|                 |/-\
           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||
            `--'                 `--'

    $$\      $$\                              $$\                                
    $$$\    $$$ |                             $$ |                               
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                               
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                               
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                               
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                               
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                               
    \__|     \__| \______/ \__|      \_______|\__|                               
    $$\      $$\                     $$\       $$\                               
    $$$\    $$$ |                    $$ |      \__|                              
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$\   $$$$$$$\ 
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$$\ $$  _____|
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$$ |\$$$$$$\  
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   ____| \____$$\ 
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$$\ $$$$$$$  |
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_______|\_______/ 


Welcome to Moral Machines! 
    
The idea of Moral Machines is based on the Trolley Dilemma, a fictional scenario presenting a decision maker with a moral dilemma: choosing ”the lesser of two evils”. The scenario entails an autonomous car whose brakes fail at a pedestrian crossing. As it is too late to relinquish control to the car’s passengers, the car needs to make a decision. Now.

The answers are not straightforward. There are a number of variables at play, which influence how people may feel about the decision: the number of pedestrians or passengers, whether the pedestrians are crossing the street legally, and personal characteristics that our automomous car can somehow infer (people's body tye, profession, gender, age, etc.). This program is a thought experiment, which explores how decisions should be made by auditing algorithms and collecting user feedback. You, the user of this program, will be put into (im)possible situations, left to decide about life and death.============================================
src/Character.java
14:43:40_Sunday_21_June_2020
============================================
/*
 * Moral Machine: ethicalengine/Character.java
 * Characters in scenarios.
 *
 * Runfeng Du 900437
 */
package ethicalengine;

public abstract class Character {

    public static class InvalidCharacteristicException extends RuntimeException {
        /**
         * Default constructor
         * @param errorMessage the error message
         */
        public InvalidCharacteristicException(String errorMessage) {
            super(errorMessage);
        }
    }

    public enum Gender {MALE, FEMALE, UNKNOWN}
    public enum BodyType {AVERAGE, ATHLETIC, OVERWEIGHT, UNKNOWN}

    private int age;
    private Gender gender = Gender.UNKNOWN;
    private BodyType bodyType = BodyType.UNKNOWN;

    /**
     * Empty constructor
     */
    public Character() {}

    /**
     * Default constructor
     * @param age age of character
     * @param gender gender of character
     * @param bodyType body type of character
     */
    public Character(int age, Gender gender, BodyType bodyType) {
        try {
            this.setAge(age);
            this.setGender(gender);
            this.setBodyType(bodyType);
        }
        catch (RuntimeException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Copy constructor
     * @param c a character
     */
    public Character(Character c) {
        this.age = c.age;
        this.gender = c.gender;
        this.bodyType = c.bodyType;
    }

    /**
     * Get age of character
     * @return age of character
     */
    public int getAge(){
        return this.age;
    }

    /**
     * Set age of character
     * @param age age of character (int)
     * @throws NumberFormatException when invalid age received
     */
    public void setAge(int age) throws NumberFormatException {
        if (age>=0) {
            this.age = age;
        }
        else{
            throw new NumberFormatException("Invalid input: age must be positive");
        }
    }

    /**
     * Set age of character (specified for parseScenario)
     * @param age age of character (int)
     * @param lineCount line count of parsing scenario
     * @throws NumberFormatException when invalid input received
     * @see ScenarioGenerator
     */
    public void setAge(String age, int lineCount) throws NumberFormatException {
        try {
            setAge(Integer.parseInt(age));
        }
        catch (java.lang.NumberFormatException e) {
            System.out.println("WARNING: invalid number format in config file in line " + lineCount);
            setAge(25);
        }
    }

    /**
     * Get gender of character
     * @return gender of character
     */
    public Gender getGender(){
        return this.gender;
    }

    /**
     * Set gender of character
     * @param gender gender of character
     */
    public void setGender(Gender gender) {
        this.gender = gender;
    }

    /**
     * Set gender of character (specified for parseScenario)
     * @param gender gender of character
     * @param lineNumber line count of parsing scenario
     * @throws InvalidCharacteristicException when invalid input received
     * @see ScenarioGenerator
     */
    public void setGender(String gender, int lineNumber)
            throws InvalidCharacteristicException {
        if (gender.toLowerCase().equals("female")){
            this.gender = Gender.FEMALE;
        }
        else if (gender.toLowerCase().equals("male")){
            this.gender = Gender.MALE;
        }
        else {
            this.gender = Gender.UNKNOWN;
            if (!gender.equals("")){
                throw new InvalidCharacteristicException(
                        "WARNING: invalid characteristic in config file in line " + lineNumber);
            }
        }
    }

    /**
     * Get body type of character
     * @return body type of character
     */
    public BodyType getBodyType() {
        return bodyType;
    }

    /**
     * Set body type of character
     * @param bodyType body type of character
     */
    public void setBodyType(BodyType bodyType) {
        this.bodyType = bodyType;
    }

    /**
     * Set body type of character (specified for parseScenario)
     * @param bodyType body type of character
     * @param lineNumber line count of parsing scenario
     * @throws InvalidCharacteristicException when invalid input received
     */
    public void setBodyType(String bodyType, int lineNumber)
            throws InvalidCharacteristicException {
        boolean bodyTypeSet = false;
        for (BodyType b: BodyType.values()) {
            if (b.name().equals(bodyType.toUpperCase())){
                this.bodyType = b;
                bodyTypeSet = true;
            }
        }
        if (!bodyTypeSet && !bodyType.equals("")){
            this.bodyType = BodyType.UNKNOWN;
            throw new InvalidCharacteristicException(
                    "WARNING: invalid characteristic in config file in line " + lineNumber);
        }
    }

    /**
     * Convert character to string
     * @return string represents a character
     * @see Person
     * @see Animal
     */
    public abstract String toString();

    /**
     * Is the character you
     * @return is you?
     * @see Person
     * @see Animal
     */
    public abstract boolean isYou();
}


============================================
src/EthicalEngine.java
14:43:40_Sunday_21_June_2020
============================================
/*
  Moral Machine: EthicalEngine.java
  Main script for process management.

  Runfeng Du 900437
 */

import ethicalengine.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class EthicalEngine {
    /**
     * The main method for commandline management
     * @param args commandline arguments
     */
    public static void main(String[] args) {
        boolean isInteractive = false;
        boolean isConfig = false;
        ArrayList<Scenario> configBuffer = new ArrayList<>();
        String resultOutput = "result.log";
        String joinedArgs = String.join(" ",args);
        String[] commandBundle = (" "+ joinedArgs).split(" -");

        for (String s: commandBundle) {
            String[] parameters = s.split(" ");
            try {
                switch (parameters[0]) {
                    case "c":
                    case "-config":
                        // if config path not provided: open help screen & exit
                        if (parameters.length < 2) {
                            helpScreen();
                        } else {
                            ArrayList<String[]> importedFile = new ArrayList<>();
                            try {
                                BufferedReader inputStream = new BufferedReader(new FileReader(parameters[1]));
                                String line = inputStream.readLine();
                                int lineCount = 1;

                                while (line != null) {
                                    // if not the first row: read that row
                                    if (lineCount != 1) {
                                        importedFile.add(line.split(",", -1));
                                    }
                                    lineCount += 1;
                                    line = inputStream.readLine();
                                }
                                inputStream.close();
                                // send imported file to scenario generator
                                ScenarioGenerator generator = new ScenarioGenerator();
                                configBuffer = generator.parseScenario(importedFile);
                                isConfig = true;
                            } catch (FileNotFoundException e) {
                                System.out.println("ERROR: could not find config file.");
                                System.exit(0);
                            } catch (IOException ignored) {
                            }
                        }
                        break;

                    case "h":
                    case "-help":
                        helpScreen();
                        break;

                    case "i":
                    case "-interactive":
                        isInteractive = true;
                        break;

                    case "r":
                    case "-results":
                        if (parameters.length < 2) {
                            helpScreen();
                        }
                        try {
                            new FileReader(parameters[1]);
                        } catch (FileNotFoundException e) {
                            System.out.println("ERROR: could not print results. Target directory does not exist.");
                            System.exit(0);
                        }
                        // input is fine: change save path
                        resultOutput = parameters[1];
                }
            }
            catch (ArrayIndexOutOfBoundsException ignored) {}
        }

        /*
         * Initiate sessions by parameters parsed
         */
        if (isInteractive) {
            // interactive mode
            InteractiveMode interactive = new InteractiveMode(configBuffer, isConfig);
            interactive.setResultPath(resultOutput);
            interactive.run();
        }
        else {
            // normal mode
            boolean response = true;
            Audit audit = new Audit();
            if (isConfig) {
                audit = new Audit(configBuffer);
                audit.run();
                audit.printToFile(resultOutput);
                audit.printStatistic();
            }
            else {
                while (response) {
                    InteractiveMode.welcomeMessage();
                    System.out.println();
                    System.out.println("How many runs do you want?");
                    audit.run(Integer.parseInt(Audit.scannerObject.nextLine()));
                    audit.printToFile(resultOutput);
                    audit.printStatistic();
                    System.out.println("Would you like to continue? (yes/no)");
                    if (!Audit.scannerObject.nextLine().equals("yes")){
                        response = false;
                    }
                }
            }
        }
    }

    /**
     * Decide a scenario (implemented by decision engine)
     * @param scenario a scenario
     * @return decision of survivors
     * @see DecisionEngine
     */
    public static DecisionEngine.Decision decide(Scenario scenario) {
        return (new DecisionEngine()).decide(scenario);
    }

    /**
     * Display the help screen and exit
     */
    public static void helpScreen() {
        System.out.println("EthicalEngine - COMP90041 - Final Project");
        System.out.println();
        System.out.println("Usage: java EthicalEngine [arguments]");
        System.out.println();
        System.out.println("Arguments:");
        System.out.println("   -c or --config      Optional: path to config file");
        System.out.println("   -h or --help        Print Help (this message) and exit");
        System.out.println("   -r or --results     Optional: path to result log file");
        System.out.println("   -i or --interactive Optional: launches interactive mode");
        System.exit(0);
    }
}

============================================
src/Audit.java
14:43:40_Sunday_21_June_2020
============================================
/*
 * Moral Machine: Audit.java
 * manages audit sessions.
 *
 * Runfeng Du 900437
 */

import ethicalengine.*;
import ethicalengine.Character;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

public class Audit {
    private String auditType = "Unspecified";
    private final HashMap<String, int[]> statisticsDatabase = new HashMap<>();
    private int runCount = 0;
    private int surviveCount = 0;
    private double ageSum = 0.0;
    private ArrayList<Scenario> scenarioBuffer;
    // a public scanner
    public static Scanner scannerObject = new Scanner(System.in);

    /**
     * Empty constructor
     */
    public Audit() {}

    /**
     * Constructor with scenarios specified
     * @param scenarioSet set of scenarios to be run
     */
    public Audit(ArrayList<Scenario> scenarioSet) {
        scenarioBuffer = scenarioSet;
    }

    /**
     * Manually load scenarios into audit
     * @param scenarioSet set of scenarios to be run
     */
    public void loadScenarios (ArrayList<Scenario> scenarioSet) {
        scenarioBuffer = scenarioSet;
    }

    /**
     * run audit by randomly generated scenarios.
     * @param runs number of audit to be run
     */
    public void run(int runs) {
        ScenarioGenerator generator = new ScenarioGenerator();
        for (int i = 0; i < runs ; i++) {
            Scenario scenario = generator.generate();
            DecisionEngine.Decision result = EthicalEngine.decide(scenario);
            this.updateStatistics(scenario, result);
            runCount += 1;
        }
    }

    /**
     * Run audit by imported scenarios.
     */
    public void run() {
        for (Scenario s: scenarioBuffer) {
            DecisionEngine.Decision result = EthicalEngine.decide(s);
            this.updateStatistics(s, result);
            runCount += 1;
        }
    }

    /**
     * Run audit in interactive mode
     */
    public void interactiveRun() {
        for (Scenario s: scenarioBuffer) {
            DecisionEngine.Decision decision = DecisionEngine.Decision.PASSENGERS;
            boolean decisionMade = false;

            System.out.print(s.toString());
            while (!decisionMade){
                System.out.println("Who should be saved? (passenger(s) [1] or pedestrian(s) [2])");
                switch (scannerObject.nextLine()){
                    case "passenger":
                    case "passengers":
                    case "1":
                        decision = DecisionEngine.Decision.PASSENGERS;
                        decisionMade = true;
                        break;

                    case "pedestrian":
                    case "pedestrians":
                    case "2":
                        decision = DecisionEngine.Decision.PEDESTRIANS;
                        decisionMade = true;
                        break;

                    default:
                        System.out.print("Invalid response. ");
                        break;
                }
            }
            this.updateStatistics(s, decision);
            runCount += 1;
        }
        // clear buffer
        scenarioBuffer = new ArrayList<>();
    }

    /**
     * get audit type
     * @return the audit type
     */
    public String getAuditType() {
        return auditType;
    }

    /**
     * Set audit type
     * @param auditType the audit type
     */
    public void setAuditType(String auditType) {
        this.auditType = auditType;
    }

    private void updateStatistics(Scenario scenario, DecisionEngine.Decision decision) {
        ArrayList<Character> survivors = (decision ==
                DecisionEngine.Decision.PASSENGERS) ?
                scenario.getPassengers() : scenario.getPedestrians();
        ArrayList<Character> sacrifices = (decision ==
                DecisionEngine.Decision.PASSENGERS) ?
                scenario.getPedestrians() : scenario.getPassengers();

        //survivors
        for (Character c: survivors) {
            characterUpdate(c, 1, scenario.isLegalCrossing());
        }
        //sacrifices
        for (Character c: sacrifices) {
            characterUpdate(c,0, scenario.isLegalCrossing());
        }

    }

    private void entryUpdate(String key, int modifier) {
        if (!key.equals("UNKNOWN") && !key.equals("NONE")){
            statisticsDatabase.putIfAbsent(key, new int[]{0, 0});
            int[] entry = statisticsDatabase.get(key);
            statisticsDatabase.replace(key, new int[]{entry[0]+1, entry[1]+modifier});
        }
    }

    private void characterUpdate(Character c, int modifier, boolean isLegalCrossing) {
        entryUpdate(isLegalCrossing? "green": "red", modifier);

        if (c instanceof Person) {
            if (modifier == 1){
                ageSum += c.getAge();
                surviveCount += 1;
            }
            entryUpdate(c.getBodyType().name(), modifier);
            entryUpdate(c.getGender().name(), modifier);
            entryUpdate(((Person) c).getProfession().name(), modifier);
            entryUpdate(((Person) c).getAgeCategory().name(), modifier);
            entryUpdate("person", modifier);
            if ((c).isYou()){
                entryUpdate("you", modifier);
            }
            if (((Person) c).isPregnant()){
                entryUpdate("pregnant", modifier);
            }
        }
        else if (c instanceof Animal) {
            entryUpdate(((Animal) c).getSpecies(), modifier);
            entryUpdate("animal", modifier);
            if (((Animal) c).isPet()){
                entryUpdate("pet", modifier);
            }
        }
    }

    /**
     * Convert audit statistics to string
     * @return string representing an audit
     */
    public String toString() {
        StringBuilder string = new StringBuilder();
        string.append("======================================\n");
        string.append("# ").append(getAuditType()).append(" Audit\n");
        string.append("======================================\n");
        string.append("- % SAVED AFTER ").append(runCount).append(" RUNS\n");

        // sort database by survival rate.
        ArrayList <String[]> sortedDatabase = new ArrayList<>();
        for (String key:statisticsDatabase.keySet()) {
            int[] entry = statisticsDatabase.get(key);
            double survivalRate = (double)entry[1]/(double) entry[0];
            sortedDatabase.add(new String[]{key, String.valueOf(survivalRate)});
        }
        //sortedDatabase.sort(Comparator.comparingDouble(o -> -1 * Double.parseDouble(o[1])));
        sortedDatabase.sort(Comparator.comparing((String[] o) -> -1 * Double.parseDouble(o[1]))
                .thenComparing(o -> o[0]));

        for (String[] s: sortedDatabase) {
            string.append(s[0].toLowerCase()).append(": ")
                    .append(String.format("%.1f", Double.parseDouble(s[1])))
                    .append("\n");
        }
        string.append("--\n");
        string.append("average age: ").append(new DecimalFormat("#.#")
                .format(ageSum/surviveCount)).append("\n");
        return string.toString();
    }

    /**
     * Print statistics out
     */
    public void printStatistic() {
        System.out.println(toString());
    }

    /**
     * Print statistics to file
     * @param path path of file output
     */
    public void printToFile(String path) {
        try {
            PrintWriter outputStream = new PrintWriter(new FileOutputStream(path, true));
            outputStream.println(toString());
            outputStream.close();
        }
        catch (FileNotFoundException e) {
            System.out.println(
                    "ERROR: could not print results. Target directory does not exist.");
        }
    }
}
============================================
src/DecisionEngine.java
14:43:40_Sunday_21_June_2020
============================================
/*
 * Moral Machine: ethicalengine/DecisionEngine.java
 * The engine to make decisions.
 *
 * Runfeng Du 900437
 */

import ethicalengine.Animal;
import ethicalengine.Character;
import ethicalengine.Person;
import ethicalengine.Scenario;
import java.util.HashMap;
import static ethicalengine.Character.BodyType.*;
import static ethicalengine.Person.AgeCategory.*;
import static ethicalengine.Person.Profession.*;

public class DecisionEngine {
    public enum Decision {PEDESTRIANS, PASSENGERS}

    /*
     * Merits of characteristics
     */
    final HashMap<Person.Profession, Double> professionMerit =
            new HashMap<Person.Profession, Double>() {
        { put(CEO, 1.0);
          put(CRIMINAL, 0.5);
          put(DOCTOR, 1.5);
          put(FIREFIGHTER, 1.5);
          put(JANITOR, 1.0);
          put(HOMELESS, 0.7);
          put(UNEMPLOYED, 1.0);
          put(STUDENT, 1.1);
          put(PROFESSOR, 1.1);
          put(Person.Profession.UNKNOWN, 1.0);
          put(NONE, 1.0);
          put(null, 1.0);
        }
    };
    final HashMap<Person.AgeCategory, Double> ageTypeMerit =
            new HashMap<Person.AgeCategory, Double>() {
        { put(BABY, 3.0);
          put(CHILD, 2.5);
          put(ADULT, 1.0);
          put(SENIOR, 0.8);
          put(null, 1.0);
        }
    };
    final HashMap<Character.BodyType, Double> bodyTypeMerit =
            new HashMap<Character.BodyType, Double>() {
        { put(AVERAGE, 1.0);
          put(ATHLETIC, 1.05);
          put(OVERWEIGHT, 0.95);
          put(Character.BodyType.UNKNOWN, 1.0);
          put(null, 1.0);
        }
    };
    final double illegalCrossingDemerit = 0.7;
    final double pregnantMerit = 3.0;
    final double animalMerit = 0.01;
    final double petMerit = 20.0;
    final double youMerit = 2.0;

    /**
     * Make a decision on a scenario
     * @param scenario a scenario
     * @return decision
     */
    public Decision decide(Scenario scenario){
        double passengerRating = 0;
        double pedestrianRating = 0;

        for (Character c : scenario.getPassengers()) {
            passengerRating += rateCharacter(c);
        }
        for (Character c: scenario.getPedestrians()) {
            pedestrianRating += rateCharacter(c);
        }
        if (!scenario.isLegalCrossing()){
            pedestrianRating = pedestrianRating * illegalCrossingDemerit;
        }
        return (passengerRating > pedestrianRating) ? Decision.PASSENGERS : Decision.PEDESTRIANS;
    }

    /**
     * Rate characters
     * @param c a character
     * @return rating
     */
    public double rateCharacter(Character c) {
        if (c instanceof Person) {
            return professionMerit.get(((Person) c).getProfession()) *
                    ageTypeMerit.get(((Person) c).getAgeCategory()) *
                    bodyTypeMerit.get(c.getBodyType()) *
                    ((((Person) c).isPregnant()) ? pregnantMerit : 1.0) *
                    (c.isYou() ? youMerit : 1.0);
        }
        if (c instanceof Animal) {
            return animalMerit * (((Animal) c).isPet()? petMerit : 1.0);
        }
        return 0;
    }
}
============================================
src/InteractiveMode.java
14:43:40_Sunday_21_June_2020
============================================
/*
 * Moral Machine: InteractiveMode.java
 * Manages interactive sessions
 *
 * Runfeng Du 900437
 */

import ethicalengine.Scenario;
import ethicalengine.ScenarioGenerator;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class InteractiveMode {
    private ArrayList<Scenario> configs = new ArrayList<>();
    private boolean configMode = false;
    private boolean saveToFile = false;
    private String resultPath = "result.log";

    /**
     * Empty constructor
     */
    public InteractiveMode() {}

    /**
     * Constructor with configs provided
     * @param configs configs of scenarios
     * @param isConfig is config provided
     */
    public InteractiveMode(ArrayList<Scenario> configs, boolean isConfig) {
        this.configs = configs;
        configMode = isConfig;
    }

    /**
     * Query for file saving consent
     */
    private void setConsent() {
        boolean consentSet = false;
        while (!consentSet){
            System.out.println("Do you consent to have your decisions saved to a file? (yes/no)");
            String commandReceived = Audit.scannerObject.nextLine();
            if (commandReceived.equals("yes")){
                saveToFile = true;
                consentSet = true;
            }
            else if (commandReceived.equals("no")){
                saveToFile = false;
                consentSet = true;
            }
            else {
                System.out.print("Invalid response.");
            }
        }
    }

    /**
     * Display welcome messages
     */
    public static void welcomeMessage() {
        try {
            BufferedReader inputStream = new BufferedReader(new FileReader("welcome.ascii"));
            String line = inputStream.readLine();
            while (line != null){
                System.out.println(line);
                line = inputStream.readLine();
            }
            inputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void runAudit(Audit audit, ArrayList<Scenario> config) {
        audit.loadScenarios(config);
        audit.interactiveRun();
        audit.printStatistic();
        if (saveToFile){
            audit.printToFile(resultPath);
        }
    }

    /**
     * Start the interactive mode
     */
    public void run() {
        welcomeMessage();
        setConsent();
        Audit audit = new Audit();
        audit.setAuditType("User");

        if (!configMode) {
            ScenarioGenerator generator = new ScenarioGenerator();
            for (int i = 0; i < 3; i++) {
                configs.add(generator.generate());
            }
        }
        if (configs.size() <= 3){
            if (configMode) {
                runAudit(audit, configs);
            } else {
                boolean response = true;
                while (response){
                    configs = new ArrayList<>();
                    ScenarioGenerator generator = new ScenarioGenerator();
                    for (int i = 0; i < 3; i++) {
                        configs.add(generator.generate());
                    }
                    runAudit(audit, configs);
                    System.out.print("Would you like to continue? (yes/no)");
                    String commandReceived = Audit.scannerObject.nextLine();
                    if (!commandReceived.equals("yes")){
                        response = false;
                    }
                }
            }
        }
        else {
            for (int i = 0; i < configs.size()/3; i++) {
                ArrayList<Scenario> configSlice = new ArrayList<>(configs.subList(3*i, 3*i+3));
                runAudit(audit, configSlice);
                System.out.println("Would you like to continue? (yes/no)");
                String commandReceived = Audit.scannerObject.nextLine();
                if (!commandReceived.equals("yes")){
                    break;
                }
            }
            if (configs.size()%3>0){
                ArrayList<Scenario> configSlice = new ArrayList<>(configs.subList(3*(configs.size()/3),
                        3*(configs.size()/3) + configs.size()%3));
                runAudit(audit, configSlice);
            }
        }
        System.out.println("That's all. Press any key to quit.");
        Audit.scannerObject.nextLine();
        System.exit(0);
    }

    /**
     * Set path of file saving
     * @param resultPath path for file saving
     */
    public void setResultPath(String resultPath) {
        this.resultPath = resultPath;
    }

    /**
     * Get path of file saving
     * @return path of file saving
     */
    public String getResultPath() {
        return resultPath;
    }
}
============================================
src/Animal.java
14:43:40_Sunday_21_June_2020
============================================
/*
 * Moral Machine: ethicalengine/Animal.java
 * Animals in scenarios.
 *
 * Runfeng Du 900437
 */
package ethicalengine;

public class Animal extends Character{
    enum Species {cat, dog, monkey, pig, duck, chicken, horse}

    private String species;
    private boolean isPet;

    /**
     * Empty constructor
     */
    public Animal() {}

    /**
     * Constructor with species specified
     * @param species species of animal
     */
    public Animal(String species){
        this.setSpecies(species);
    }

    /**
     * Default Constructor
     * @param age age of animal
     * @param species species of animal
     * @param gender gender of animal
     * @param bodytype bodytype of animal
     * @param isPet is the animal pet?
     */
    public Animal(int age, String species, Gender gender, BodyType bodytype, boolean isPet){
        super(age, gender, bodytype);
        this.setSpecies(species);
        this.setPet(isPet);
    }

    /**
     * Copy constructor
     * @param a an animal
     */
    public Animal(Animal a){
        this.species = a.species;
        this.isPet = a.isPet;
    }

    /**
     * Set species of animal
     * @param species species of animal
     */
    public void setSpecies(String species) {
        this.species = species;
    }

    /**
     * Get species of animal
     * @return species of animal
     */
    public String getSpecies() {
        return species;
    }

    /**
     * is the animal pet?
     * @return is pet?
     */
    public boolean isPet() {
        return isPet;
    }

    /**
     * Set the animal as pet/not pet
     * @param isPet is pet?
     */
    public void setPet(boolean isPet) {
        this.isPet = isPet;
    }

    /**
     * Convert animal to string
     * @return a string representing the animal
     */
    public String toString(){
        StringBuilder string = new StringBuilder();
        string.append(species.toLowerCase());
        if (isPet()){
            string.append(" is pet");
        }
        return string.toString();
    }

    /**
     * Is you?
     * @return always false
     */
    public boolean isYou() {
        return false;
    }
}

============================================
src/Person.java
14:43:40_Sunday_21_June_2020
============================================
/*
 * Moral Machine: ethicalengine/Person.java
 * Persons in scenarios.
 *
 * Runfeng Du 900437
 */

package ethicalengine;

public class Person extends Character{

    public enum Profession {DOCTOR, CEO, FIREFIGHTER, JANITOR, CRIMINAL, HOMELESS,
        STUDENT, PROFESSOR, UNEMPLOYED, UNKNOWN, NONE}
    public enum AgeCategory {BABY, CHILD, ADULT, SENIOR}

    private Profession profession = Profession.UNKNOWN;
    private boolean isPregnant;
    private boolean isYou;

    /**
     * Empty constructor
     */
    public Person() {}

    /**
     * Default constructor
     * @param age age of person
     * @param profession profession of person
     * @param gender gender of person
     * @param bodytype bodytype of person
     * @param isPregnant is the person pregnant
     */
    public Person(int age, Profession profession, Gender gender,
                  BodyType bodytype, boolean isPregnant) {
        super(age, gender, bodytype);
        this.setProfession(profession);
        this.setPregnant(isPregnant);
    }

    /**
     * Copy constructor
     * @param p a person
     */
    public Person(Person p){
        super(p.getAge(), p.getGender(), p.getBodyType());
        this.profession = p.profession;
        this.isPregnant = p.isPregnant;
        this.isYou = p.isYou;
    }

    /**
     * Get profession of person
     * @return profession of person
     */
    public Profession getProfession() {
        return profession;
    }

    /**
     * Set profession of person
     * @param profession profession of person
     */
    public void setProfession(Profession profession) {
        if (getAgeCategory() == AgeCategory.ADULT){
            this.profession = profession;
        }
        else {
            this.profession = Profession.NONE;
        }
    }

    /**
     * Set profession of person (specified for parseScenario)
     * @param profession profession of person
     * @param lineNumber line count of parsing scenario
     * @throws InvalidCharacteristicException when invalid input received
     * @see ScenarioGenerator
     */
    public void setProfession(String profession, int lineNumber)
            throws InvalidCharacteristicException {
        boolean professionSet = false;
        for (Profession p: Profession.values()) {
            if (p.name().equals(profession.toUpperCase())){
                setProfession(p);
                professionSet = true;
            }
        }
        // if invalid profession name received: alert user & set to unknown
        if (!professionSet && !profession.equals("")){
            setProfession(Profession.UNKNOWN);
            throw new InvalidCharacteristicException(
                    "WARNING: invalid characteristic in config file in line " + lineNumber);
        }
    }

    /**
     * Is the person pregnant
     * @return is pregnant?
     */
    public boolean isPregnant() {
        return isPregnant;
    }

    /**
     * Set the person as pregnant/not pregnant
     * @param isPregnant is pregnant?
     */
    public void setPregnant(boolean isPregnant) {
        if (getGender()==Gender.FEMALE) {
            this.isPregnant = isPregnant;
        }
        else {
            this.isPregnant = false;
        }
    }

    /**
     * Get age category of person
     * @return age category of person
     */
    public AgeCategory getAgeCategory() {
        if (getAge() <= 4) {
            return AgeCategory.BABY;
        }
        else if (getAge() <= 16) {
            return AgeCategory.CHILD;
        }
        else if (getAge() <= 68) {
            return AgeCategory.ADULT;
        }
        else{
            return AgeCategory.SENIOR;
        }
    }

    /**
     * Is the person you?
     * @return is you?
     */
    public boolean isYou() {
        return isYou;
    }

    /**
     * Set the person as you/not you
     * @param isYou is you?
     */
    public void setAsYou(boolean isYou) {
        this.isYou = isYou;
    }

    /**
     * Convert the person to string
     * @return string represents a person
     */
    public String toString() {
        StringBuilder string = new StringBuilder();
        if (isYou()){
            string.append("you ");
        }
        string.append(getBodyType().name().toLowerCase()).append(" ");
        string.append(getAgeCategory().name().toLowerCase()).append(" ");
        if (getAgeCategory()==AgeCategory.ADULT){
            string.append(getProfession().name().toLowerCase()).append(" ");
        }
        string.append(getGender().name().toLowerCase());
        if (isPregnant()){
            string.append(" pregnant");
        }
        return string.toString();
    }
}
