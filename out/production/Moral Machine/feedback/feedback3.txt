============================================
vis/result.rtx
22:12:01_Friday_19_June_2020
============================================
Feedback:
Your programs ("EthicalEngine.java" ) have been submitted successfully. 
Compiling your programs with "javac"...
Here are our Junit tests for you:
Your programs have been compiled successfully :-)
Now, it's your responsibility to test your programs for correctness!
Here are some public test cases, and the results:
============================================
Test for input file: publicin1
Expected results:                                                       Your results:
								     >	class,gender,age,bodyType,profession,pregnant,isYou,species,isPet,ro
								     >	scenario:green,,,,,,,,,
								     >	person,female,24,average,doctor,false,false,,,passenger
								     >	person,male,40,overweight,unknown,false,false,,,passenger
								     >	person,female,2,average,,false,false,,,passenger
								     >	person,male,82,average,,false,false,,,pedestrian
								     >	person,female,32,average,ceo,true,false,,,pedestrian
								     >	person,male,7,athletic,,false,false,,,pedestrian
								     >	animal,male,4,,,false,false,dog,true,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	animal,female,4,,,false,false,cat,true,pedestrian
								     >	animal,female,2,,,false,false,bird,false,pedestrian
								     >	person,female,30,athletic,doctor,false,false,,,pedestrian
								     >	person,male,1,average,,false,false,,,pedestrian
								     >	person,female,32,average,unknown,true,false,,,passenger
								     >	person,male,40,athletic,criminal,false,false,,,passenger
								     >	scenario:red,,,,,,,,,
								     >	person,female,9,athletic,,false,false,,,pedestrian
								     >	person,male,12,athletic,,false,false,,,pedestrian
								     >	person,female,13,athletic,,false,false,,,pedestrian
								     >	person,female,11,athletic,,false,false,,,pedestrian
								     >	person,male,8,athletic,,false,false,,,pedestrian
								     >	person,male,72,overweight,,false,false,,,passenger
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- average adult doctor female						- average adult doctor female
- overweight adult unknown male						- overweight adult unknown male
- average baby female							- average baby female
Pedestrians (4)								Pedestrians (4)
- average senior male							- average senior male
- average adult ceo female pregnant					- average adult ceo female pregnant
- athletic child male							- athletic child male
- dog is pet								- dog is pet
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (2)								Passengers (2)
- average adult unknown female pregnant					- average adult unknown female pregnant
- athletic adult criminal male						- athletic adult criminal male
Pedestrians (4)								Pedestrians (4)
- cat is pet								- cat is pet
- bird									- bird
- athletic adult doctor female						- athletic adult doctor female
- average baby male							- average baby male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- overweight senior male						- overweight senior male
Pedestrians (5)								Pedestrians (5)
- athletic child female							- athletic child female
- athletic child male							- athletic child male
- athletic child female							- athletic child female
- athletic child female							- athletic child female
- athletic child male							- athletic child male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
ceo: 1.0								ceo: 1.0
								     >	child: 1.0
criminal: 1.0								criminal: 1.0
dog: 1.0								dog: 1.0
pregnant: 1.0								pregnant: 1.0
child: 1.0							     <
athletic: 0.9								athletic: 0.9
red: 0.7							     <
person: 0.6							     <
female: 0.6								female: 0.6
male: 0.6								male: 0.6
								     >	green: 0.6
								     >	person: 0.6
								     >	red: 0.6
								     >	adult: 0.5
average: 0.5								average: 0.5
unknown: 0.5							     <
senior: 0.5								senior: 0.5
adult: 0.5							     <
pet: 0.5								pet: 0.5
green: 0.3							     <
animal: 0.3								animal: 0.3
doctor: 0.0							     <
cat: 0.0							     <
bird: 0.0							     <
baby: 0.0								baby: 0.0
								     >	doctor: 0.0
overweight: 0.0								overweight: 0.0
								     >	bird: 0.0
								     >	cat: 0.0
--									--
average age: 24.6						     |	average age: 22.7
Would you like to continue? (yes/no)				     |
That's all. Press Enter to quit.				     |	That's all. Press any key to quit.
Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: publicin2
Expected results:                                                       Your results:
								     >	class,gender,age,bodyType,profession,pregnant,isYou,species,isPet,ro
								     >	scenario:green,,,,,,,,,
								     >	animal,male,3,athletic,,,,cat,false,passenger
								     >	person,male,77,average,none,false,false,,,passenger
								     >	animal,male,14,overweight,,,,cat,false,pedestrian
								     >	person,male,24,average,homeless,false,false,,,pedestrian
								     >	person,male,66,average,student,false,false,,,pedestrian
								     >	person,female,22,average,homeless,true,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	person,male,29,average,criminal,false,false,,,passenger
								     >	person,female,1,athletic,none,false,false,,,pedestrian
								     >	animal,male,8,athletic,,,,cat,true,pedestrian
								     >	person,male,86,athletic,none,false,false,,,pedestrian
								     >	person,male,11,average,none,false,false,,,pedestrian
								     >	person,female,29,average,student,false,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	person,female,62,average,doctor,true,false,,,passenger
								     >	animal,male,7,average,,,,ferret,false,passenger
								     >	person,female,79,overweight,none,false,false,,,passenger
								     >	person,male,99,athletic,none,false,false,,,passenger
								     >	person,male,65,athletic,doctor,false,false,,,pedestrian
								     >	person,male,8,athletic,none,false,false,,,pedestrian
								     >	person,male,21,overweight,student,false,false,,,pedestrian
								     >	animal,female,0,overweight,,,,dog,false,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	person,male,45,average,homeless,false,true,,,passenger
								     >	person,female,42,overweight,homeless,false,false,,,passenger
								     >	person,male,68,average,professor,false,false,,,passenger
								     >	person,female,46,athletic,unknown,false,false,,,pedestrian
								     >	person,female,44,average,criminal,false,false,,,pedestrian
								     >	person,female,40,athletic,unemployed,true,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	person,female,38,athletic,ceo,true,false,,,passenger
								     >	person,female,57,overweight,doctor,false,false,,,passenger
								     >	person,male,91,average,none,false,false,,,passenger
								     >	person,female,20,athletic,ceo,true,false,,,passenger
								     >	person,female,52,athletic,student,false,false,,,pedestrian
								     >	person,male,20,average,homeless,false,false,,,pedestrian
								     >	person,male,5,average,none,false,false,,,pedestrian
								     >	person,male,19,overweight,unknown,false,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	person,female,78,average,none,false,true,,,passenger
								     >	person,female,59,athletic,criminal,true,false,,,pedestrian
								     >	person,female,63,overweight,unknown,true,false,,,pedestrian
								     >	person,male,22,overweight,student,false,false,,,pedestrian
								     >	person,female,82,average,none,false,false,,,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	person,female,20,athletic,unemployed,true,false,,,passenger
								     >	person,female,56,athletic,doctor,true,false,,,passenger
								     >	animal,male,12,average,,,,ferret,false,passenger
								     >	animal,male,7,overweight,,,,ferret,false,passenger
								     >	animal,male,16,overweight,,,,ferret,true,passenger
								     >	person,female,78,athletic,none,false,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	person,male,80,athletic,none,false,false,,,passenger
								     >	animal,male,15,overweight,,,,ferret,true,passenger
								     >	person,female,23,average,criminal,false,false,,,passenger
								     >	person,female,44,overweight,unemployed,true,false,,,passenger
								     >	person,male,52,athletic,professor,false,false,,,pedestrian
								     >	person,female,48,athletic,unemployed,true,false,,,pedestrian
								     >	animal,female,11,overweight,,,,ferret,false,pedestrian
								     >	person,male,39,average,student,false,false,,,pedestrian
								     >	person,male,0,overweight,none,false,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	person,female,43,athletic,unknown,false,false,,,passenger
								     >	person,male,74,overweight,none,false,false,,,passenger
								     >	person,male,23,average,unknown,false,false,,,pedestrian
								     >	person,female,36,overweight,student,false,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	animal,male,10,average,,,,dog,false,passenger
								     >	person,male,84,athletic,none,false,false,,,passenger
								     >	person,male,96,average,none,false,false,,,passenger
								     >	person,female,13,overweight,none,false,true,,,pedestrian
								     >	person,male,57,average,unemployed,false,false,,,pedestrian
								     >	person,female,61,average,ceo,false,false,,,pedestrian
								     >	person,male,80,average,none,false,false,,,pedestrian
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (2)								Passengers (2)
- cat									- cat
- average senior male							- average senior male
Pedestrians (4)								Pedestrians (4)
- cat									- cat
- average adult homeless male						- average adult homeless male
- average adult student male						- average adult student male
- average adult homeless female pregnant				- average adult homeless female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- average adult criminal male						- average adult criminal male
Pedestrians (5)								Pedestrians (5)
- athletic baby female							- athletic baby female
- cat is pet								- cat is pet
- athletic senior male							- athletic senior male
- average child male							- average child male
- average adult student female						- average adult student female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- average adult doctor female pregnant					- average adult doctor female pregnant
- ferret								- ferret
- overweight senior female						- overweight senior female
- athletic senior male							- athletic senior male
Pedestrians (4)								Pedestrians (4)
- athletic adult doctor male						- athletic adult doctor male
- athletic child male							- athletic child male
- overweight adult student male						- overweight adult student male
- dog									- dog
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
green: 1.0							     <
senior: 1.0							     <
baby: 1.0								baby: 1.0
								     >	senior: 1.0
ferret: 1.0								ferret: 1.0
pet: 1.0								pet: 1.0
female: 0.8								female: 0.8
cat: 0.7								cat: 0.7
animal: 0.6							     <
athletic: 0.6								athletic: 0.6
person: 0.5							     |	animal: 0.6
								     >	green: 0.6
average: 0.5								average: 0.5
								     >	child: 0.5
doctor: 0.5								doctor: 0.5
overweight: 0.5								overweight: 0.5
								     >	person: 0.5
pregnant: 0.5								pregnant: 0.5
child: 0.5							     <
male: 0.4								male: 0.4
student: 0.3							     <
adult: 0.3								adult: 0.3
homeless: 0.0							     |	student: 0.3
red: 0.0							     <
criminal: 0.0								criminal: 0.0
								     >	homeless: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 55.5						     |	average age: 42
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (3)								Passengers (3)
- average adult homeless male					     |	- you average adult homeless male
- overweight adult homeless female					- overweight adult homeless female
- average adult professor male						- average adult professor male
Pedestrians (3)								Pedestrians (3)
- athletic adult unknown female						- athletic adult unknown female
- average adult criminal female						- average adult criminal female
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- athletic adult ceo female pregnant					- athletic adult ceo female pregnant
- overweight adult doctor female					- overweight adult doctor female
- average senior male							- average senior male
- athletic adult ceo female pregnant					- athletic adult ceo female pregnant
Pedestrians (4)								Pedestrians (4)
- athletic adult student female						- athletic adult student female
- average adult homeless male						- average adult homeless male
- average child male							- average child male
- overweight adult unknown male						- overweight adult unknown male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- average senior female						     |	- you average senior female
Pedestrians (4)								Pedestrians (4)
- athletic adult criminal female pregnant				- athletic adult criminal female pregnant
- overweight adult unknown female pregnant				- overweight adult unknown female pregnant
- overweight adult student male						- overweight adult student male
- average senior female							- average senior female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 6 RUNS							- % SAVED AFTER 6 RUNS
unemployed: 1.0							     <
pet: 1.0							     <
baby: 1.0								baby: 1.0
								     >	unemployed: 1.0
ferret: 1.0								ferret: 1.0
green: 0.8							     |	pet: 1.0
								     >	child: 0.7
senior: 0.7								senior: 0.7
unknown: 0.7							     <
cat: 0.7								cat: 0.7
child: 0.7							     |	athletic: 0.6
animal: 0.6								animal: 0.6
athletic: 0.5							     <
female: 0.5							     <
average: 0.5								average: 0.5
								     >	female: 0.5
								     >	green: 0.5
person: 0.5								person: 0.5
								     >	red: 0.5
								     >	you: 0.5
								     >	adult: 0.4
male: 0.4								male: 0.4
student: 0.4								student: 0.4
adult: 0.3							     <
criminal: 0.3								criminal: 0.3
doctor: 0.3								doctor: 0.3
overweight: 0.3								overweight: 0.3
pregnant: 0.3								pregnant: 0.3
homeless: 0.2								homeless: 0.2
red: 0.2							     <
ceo: 0.0								ceo: 0.0
professor: 0.0								professor: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 46.8						     |	average age: 40.3
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (5)								Passengers (5)
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
- ferret								- ferret
- ferret								- ferret
- ferret is pet								- ferret is pet
Pedestrians (1)								Pedestrians (1)
- athletic senior female						- athletic senior female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- athletic senior male							- athletic senior male
- ferret is pet								- ferret is pet
- average adult criminal female						- average adult criminal female
- overweight adult unemployed female pregnant				- overweight adult unemployed female pregnant
Pedestrians (5)								Pedestrians (5)
- athletic adult professor male						- athletic adult professor male
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- ferret								- ferret
- average adult student male						- average adult student male
- overweight baby male							- overweight baby male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (2)								Passengers (2)
- athletic adult unknown female						- athletic adult unknown female
- overweight senior male						- overweight senior male
Pedestrians (2)								Pedestrians (2)
- average adult unknown male						- average adult unknown male
- overweight adult student female					- overweight adult student female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 9 RUNS							- % SAVED AFTER 9 RUNS
pet: 1.0								pet: 1.0
ferret: 0.8							     <
green: 0.8							     <
unemployed: 0.8								unemployed: 0.8
								     >	ferret: 0.8
								     >	child: 0.7
animal: 0.7								animal: 0.7
cat: 0.7								cat: 0.7
child: 0.7							     |	red: 0.7
unknown: 0.6							     <
senior: 0.6							     <
female: 0.6								female: 0.6
								     >	senior: 0.6
								     >	athletic: 0.5
average: 0.5								average: 0.5
								     >	baby: 0.5
criminal: 0.5								criminal: 0.5
doctor: 0.5								doctor: 0.5
baby: 0.5							     |	green: 0.5
athletic: 0.5							     <
person: 0.5								person: 0.5
pregnant: 0.5								pregnant: 0.5
student: 0.4							     |	you: 0.5
adult: 0.4								adult: 0.4
male: 0.4								male: 0.4
overweight: 0.4								overweight: 0.4
red: 0.2							     |	student: 0.4
homeless: 0.2								homeless: 0.2
ceo: 0.0								ceo: 0.0
professor: 0.0								professor: 0.0
dog: 0.0								dog: 0.0
--									--
average age: 44.8						     |	average age: 36.6
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- dog									- dog
- athletic senior male							- athletic senior male
- average senior male							- average senior male
Pedestrians (4)								Pedestrians (4)
- overweight child female					     |	- you overweight child female
- average adult unemployed male						- average adult unemployed male
- average adult ceo female						- average adult ceo female
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 10 RUNS							- % SAVED AFTER 10 RUNS
pet: 1.0								pet: 1.0
ferret: 0.8								ferret: 0.8
green: 0.8							     <
animal: 0.7								animal: 0.7
cat: 0.7								cat: 0.7
								     >	red: 0.7
senior: 0.6								senior: 0.6
unknown: 0.6							     <
unemployed: 0.6								unemployed: 0.6
athletic: 0.5								athletic: 0.5
female: 0.5							     |	average: 0.5
								     >	baby: 0.5
								     >	child: 0.5
criminal: 0.5								criminal: 0.5
doctor: 0.5								doctor: 0.5
baby: 0.5							     |	female: 0.5
dog: 0.5								dog: 0.5
child: 0.5							     |	green: 0.5
average: 0.5							     <
person: 0.5								person: 0.5
pregnant: 0.5								pregnant: 0.5
student: 0.4							     <
male: 0.4							     <
adult: 0.4								adult: 0.4
								     >	male: 0.4
								     >	student: 0.4
overweight: 0.3								overweight: 0.3
red: 0.2							     |	you: 0.3
homeless: 0.2								homeless: 0.2
ceo: 0.0								ceo: 0.0
professor: 0.0								professor: 0.0
--									--
average age: 48.4						     |	average age: 39
That's all. Press Enter to quit.				     |
								     >	That's all. Press any key to quit.
Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: publicin3
Expected results:                                                       Your results:
WARNING: invalid data format in config file in line 3		     |	class,gender,age,bodyType,profession,pregnant,isYou,species,isPet,ro
WARNING: invalid data format in config file in line 22		     |	scenario:green,,,,,,,,,
								     >	person,male,59,overweight,ceo,false,false,,,,,passenger
								     >	person,male,7,average,none,false,false,,,passenger
								     >	person,female,56,average,unknown,true,false,,,pedestrian
								     >	person,male,52,overweight,ceo,false,false,,,pedestrian
								     >	person,female,52,athletic,unemployed,true,false,,,pedestrian
								     >	person,female,96,average,none,false,false,,,pedestrian
								     >	person,male,23,athletic,criminal,false,false,,,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	person,male,65,overweight,doctor,false,false,,,passenger
								     >	person,female,24,overweight,homeless,true,true,,,pedestrian
								     >	person,female,5,athletic,none,false,false,,,pedestrian
								     >	person,male,2,overweight,none,false,false,,,pedestrian
								     >	person,male,93,overweight,none,false,false,,,pedestrian
								     >	person,female,47,overweight,professor,true,false,,,pedestrian
								     >	animal,male,6,average,,,,dog,true,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	person,male,95,overweight,none,false,true,,,passenger
								     >	person,female,49,overweight,doctor,true,false,,,passenger
								     >	person,female,22,average,student,true,false,,,passenger
								     >	person,male,67,overweight,ceo,false,,,passenger
								     >	animal,female,14,average,,,,ferret,true,passenger
								     >	animal,female,0,average,,,,dog,true,pedestrian
								     >	animal,male,12,overweight,,,,cat,true,pedestrian
								     >	person,male,11,athletic,none,false,false,,,pedestrian
								     >	person,female,64,average,criminal,true,false,,,pedestrian
								     >	person,female,67,athletic,student,true,false,,,pedestrian
								     >	person,female,32,overweight,unknown,false,false,,,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	person,male,72,average,none,false,false,,,passenger
								     >	person,female,26,athletic,doctor,true,false,,,pedestrian
								     >	animal,female,5,overweight,,,,ferret,true,pedestrian
								     >	person,male,94,athletic,none,false,false,,,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	animal,male,19,overweight,,,,ferret,false,passenger
								     >	person,male,5,athletic,none,false,false,,,passenger
								     >	person,female,62,overweight,ceo,false,false,,,passenger
								     >	person,female,49,average,doctor,false,false,,,passenger
								     >	person,female,14,average,none,false,false,,,passenger
								     >	animal,male,2,athletic,,,,ferret,false,pedestrian
								     >	person,male,65,athletic,unknown,false,true,,,pedestrian
								     >	person,male,12,athletic,none,false,false,,,pedestrian
								     >	person,male,90,average,none,false,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	person,female,85,overweight,none,false,false,,,passenger
								     >	person,female,4,average,none,false,false,,,pedestrian
								     >	person,female,37,average,professor,false,false,,,pedestrian
								     >	person,male,82,athletic,none,false,false,,,pedestrian
								     >	person,male,83,average,none,false,false,,,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	person,female,25,overweight,unemployed,true,false,,,passenger
								     >	person,male,54,overweight,unknown,false,false,,,passenger
								     >	animal,female,17,overweight,,,,dog,false,pedestrian
								     >	person,female,41,average,criminal,true,false,,,pedestrian
								     >	person,male,53,average,criminal,false,false,,,pedestrian
								     >	person,male,80,athletic,none,false,false,,,pedestrian
								     >	person,female,86,average,none,false,false,,,pedestrian
								     >	person,female,58,overweight,unknown,true,false,,,pedestrian
								     >	person,male,26,average,unemployed,false,false,,,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	person,male,62,overweight,professor,false,false,,,passenger
								     >	animal,female,18,athletic,,,,ferret,true,passenger
								     >	person,male,84,average,none,false,false,,,passenger
								     >	person,female,20,average,doctor,true,false,,,passenger
								     >	animal,female,14,average,,,,dog,false,passenger
								     >	person,female,41,athletic,professor,true,false,,,passenger
								     >	person,female,27,average,homeless,false,false,,,passenger
								     >	animal,female,15,overweight,,,,ferret,true,pedestrian
								     >	animal,female,20,average,,,,dog,true,pedestrian
								     >	person,female,23,athletic,unemployed,false,false,,,pedestrian
								     >	animal,male,0,athletic,,,,dog,false,pedestrian
								     >	scenario:red,,,,,,,,,
								     >	animal,female,7,average,,,,cat,true,passenger
								     >	animal,female,10,average,,,,ferret,true,passenger
								     >	person,male,76,athletic,none,false,false,,,passenger
								     >	person,female,27,overweight,unknown,false,false,,,pedestrian
								     >	person,male,10,average,none,false,false,,,pedestrian
								     >	person,male,70,athletic,none,false,false,,,pedestrian
								     >	person,male,51,average,professor,false,false,,,pedestrian
								     >	scenario:green,,,,,,,,,
								     >	animal,female,1,average,,,,dog,false,passenger
								     >	animal,female,1,overweight,,,,cat,true,passenger
								     >	person,female,50,overweight,ceo,false,false,,,passenger
								     >	animal,female,14,average,,,,dog,true,pedestrian
								     >	person,female,98,overweight,none,false,false,,,pedestrian
								     >	person,female,90,average,none,false,false,,,pedestrian
								     >	person,female,29,athletic,doctor,true,false,,,pedestrian
								     >	WARNING: invalid data format in config file in line 2
								     >	WARNING: invalid data format in config file in line 21
                   __-------__						                   __-------__
                 / _---------_ \					                 / _---------_ \
                / /           \ \					                / /           \ \
                | |           | |					                | |           | |
                |_|___________|_|					                |_|___________|_|
            /-\|                 |/-\					            /-\|                 |/-\
           | _ |\       0       /| _ |					           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|					           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|					           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 					           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||					            ||||    ~~~~~~~~~    ||||
            `--'                 `--'					            `--'                 `--'

    $$\      $$\                              $$\                   	    $$\      $$\                              $$\                   
    $$$\    $$$ |                             $$ |                  	    $$$\    $$$ |                             $$ |                  
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  	    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                  
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  	    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                  
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  	    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                  
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  	    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                  
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  	    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                  
    \__|     \__| \______/ \__|      \_______|\__|                  	    \__|     \__| \______/ \__|      \_______|\__|                  
    $$\      $$\                     $$\       $$\                  	    $$\      $$\                     $$\       $$\                  
    $$$\    $$$ |                    $$ |      \__|                 	    $$$\    $$$ |                    $$ |      \__|                 
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$	    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$	    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$	    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __	    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   __
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$	    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____	    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_____


Welcome to Moral Machines! 						Welcome to Moral Machines! 
    									    
The idea of Moral Machines is based on the Trolley Dilemma, a fictio	The idea of Moral Machines is based on the Trolley Dilemma, a fictio

The answers are not straightforward. There are a number of variables	The answers are not straightforward. There are a number of variables
Do you consent to have your decisions saved to a file? (yes/no)		Do you consent to have your decisions saved to a file? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- average child male							- average child male
Pedestrians (5)								Pedestrians (5)
- average adult unknown female pregnant					- average adult unknown female pregnant
- overweight adult ceo male						- overweight adult ceo male
- athletic adult unemployed female pregnant				- athletic adult unemployed female pregnant
- average senior female							- average senior female
- athletic adult criminal male						- athletic adult criminal male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- overweight adult doctor male						- overweight adult doctor male
Pedestrians (6)								Pedestrians (6)
- overweight adult homeless female pregnant			     |	- you overweight adult homeless female pregnant
- athletic child female							- athletic child female
- overweight baby male							- overweight baby male
- overweight senior male						- overweight senior male
- overweight adult professor female pregnant				- overweight adult professor female pregnant
- dog is pet								- dog is pet
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (4)								Passengers (4)
- overweight senior male					     |	- you overweight senior male
- overweight adult doctor female pregnant				- overweight adult doctor female pregnant
- average adult student female pregnant					- average adult student female pregnant
- ferret is pet								- ferret is pet
Pedestrians (6)								Pedestrians (6)
- dog is pet								- dog is pet
- cat is pet								- cat is pet
- athletic child male							- athletic child male
- average adult criminal female pregnant				- average adult criminal female pregnant
- athletic adult student female pregnant				- athletic adult student female pregnant
- overweight adult unknown female					- overweight adult unknown female
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 3 RUNS							- % SAVED AFTER 3 RUNS
cat: 1.0								cat: 1.0
green: 0.7							     <
child: 0.7								child: 0.7
student: 0.5							     <
unknown: 0.5							     <
criminal: 0.5								criminal: 0.5
pet: 0.5							     <
doctor: 0.5								doctor: 0.5
								     >	student: 0.5
animal: 0.5								animal: 0.5
dog: 0.5								dog: 0.5
average: 0.4							     |	pet: 0.5
athletic: 0.4								athletic: 0.4
								     >	average: 0.4
male: 0.4								male: 0.4
red: 0.3							     |	green: 0.4
adult: 0.3								adult: 0.3
person: 0.3							     <
female: 0.3								female: 0.3
								     >	person: 0.3
pregnant: 0.3								pregnant: 0.3
overweight: 0.2								overweight: 0.2
								     >	red: 0.1
								     >	baby: 0.0
ceo: 0.0								ceo: 0.0
unemployed: 0.0							     <
homeless: 0.0								homeless: 0.0
senior: 0.0							     <
professor: 0.0								professor: 0.0
baby: 0.0							     |	senior: 0.0
								     >	unemployed: 0.0
ferret: 0.0								ferret: 0.0
								     >	you: 0.0
--									--
average age: 41.0						     |	average age: 32.2
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (1)								Passengers (1)
- average senior male							- average senior male
Pedestrians (3)								Pedestrians (3)
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
- ferret is pet								- ferret is pet
- athletic senior male							- athletic senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (5)								Passengers (5)
- ferret								- ferret
- athletic child male							- athletic child male
- overweight adult ceo female						- overweight adult ceo female
- average adult doctor female						- average adult doctor female
- average child female							- average child female
Pedestrians (4)								Pedestrians (4)
- ferret								- ferret
- athletic adult unknown male					     |	- you athletic adult unknown male
- athletic child male							- athletic child male
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (1)								Passengers (1)
- overweight senior female						- overweight senior female
Pedestrians (4)								Pedestrians (4)
- average baby female							- average baby female
- average adult professor female					- average adult professor female
- athletic senior male							- athletic senior male
- average senior male							- average senior male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 6 RUNS							- % SAVED AFTER 6 RUNS
cat: 1.0								cat: 1.0
doctor: 0.8								doctor: 0.8
child: 0.7								child: 0.7
pet: 0.6							     |	athletic: 0.6
average: 0.6								average: 0.6
animal: 0.6								animal: 0.6
athletic: 0.5							     |	pet: 0.6
student: 0.5							     |	adult: 0.5
								     >	baby: 0.5
ceo: 0.5								ceo: 0.5
red: 0.5							     <
criminal: 0.5								criminal: 0.5
female: 0.5								female: 0.5
green: 0.5							     <
professor: 0.5								professor: 0.5
baby: 0.5							     |	student: 0.5
ferret: 0.5							     <
dog: 0.5								dog: 0.5
								     >	ferret: 0.5
								     >	green: 0.5
person: 0.5								person: 0.5
adult: 0.5							     |	red: 0.5
male: 0.4								male: 0.4
unknown: 0.3							     <
pregnant: 0.3							     <
senior: 0.3							     <
overweight: 0.3								overweight: 0.3
unemployed: 0.0							     |	senior: 0.3
								     >	pregnant: 0.3
homeless: 0.0								homeless: 0.0
								     >	unemployed: 0.0
								     >	you: 0.0
--									--
average age: 43.9						     |	average age: 36.9
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (2)								Passengers (2)
- overweight adult unemployed female pregnant				- overweight adult unemployed female pregnant
- overweight adult unknown male						- overweight adult unknown male
Pedestrians (7)								Pedestrians (7)
- dog									- dog
- average adult criminal female pregnant				- average adult criminal female pregnant
- average adult criminal male						- average adult criminal male
- athletic senior male							- athletic senior male
- average senior female							- average senior female
- overweight adult unknown female pregnant				- overweight adult unknown female pregnant
- average adult unemployed male						- average adult unemployed male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (7)								Passengers (7)
- overweight adult professor male					- overweight adult professor male
- ferret is pet								- ferret is pet
- average senior male							- average senior male
- average adult doctor female pregnant					- average adult doctor female pregnant
- dog									- dog
- athletic adult professor female pregnant				- athletic adult professor female pregnant
- average adult homeless female						- average adult homeless female
Pedestrians (4)								Pedestrians (4)
- ferret is pet								- ferret is pet
- dog is pet								- dog is pet
- athletic adult unemployed female					- athletic adult unemployed female
- dog									- dog
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: no							Legal Crossing: no
Passengers (3)								Passengers (3)
- cat is pet								- cat is pet
- ferret is pet								- ferret is pet
- athletic senior male							- athletic senior male
Pedestrians (4)								Pedestrians (4)
- overweight adult unknown female					- overweight adult unknown female
- average child male							- average child male
- athletic senior male							- athletic senior male
- average adult professor male						- average adult professor male
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 9 RUNS							- % SAVED AFTER 9 RUNS
cat: 1.0								cat: 1.0
criminal: 0.8								criminal: 0.8
pet: 0.7							     <
red: 0.7							     <
animal: 0.7								animal: 0.7
dog: 0.7								dog: 0.7
								     >	pet: 0.7
								     >	athletic: 0.6
								     >	child: 0.6
doctor: 0.6								doctor: 0.6
ferret: 0.6								ferret: 0.6
child: 0.6							     <
athletic: 0.6							     <
average: 0.5								average: 0.5
student: 0.5							     <
ceo: 0.5							     <
unemployed: 0.5							     <
baby: 0.5								baby: 0.5
								     >	ceo: 0.5
female: 0.5								female: 0.5
								     >	student: 0.5
								     >	unemployed: 0.5
								     >	green: 0.5
person: 0.5								person: 0.5
								     >	red: 0.5
adult: 0.4								adult: 0.4
senior: 0.4							     <
male: 0.4								male: 0.4
								     >	senior: 0.4
pregnant: 0.4								pregnant: 0.4
unknown: 0.3							     <
green: 0.3							     <
overweight: 0.3								overweight: 0.3
professor: 0.2								professor: 0.2
homeless: 0.0								homeless: 0.0
								     >	you: 0.0
--									--
average age: 47.7						     |	average age: 36.8
								     >
Would you like to continue? (yes/no)					Would you like to continue? (yes/no)
======================================					======================================
# Scenario								# Scenario
======================================					======================================
Legal Crossing: yes							Legal Crossing: yes
Passengers (3)								Passengers (3)
- dog									- dog
- cat is pet								- cat is pet
- overweight adult ceo female						- overweight adult ceo female
Pedestrians (4)								Pedestrians (4)
- dog is pet								- dog is pet
- overweight senior female						- overweight senior female
- average senior female							- average senior female
- athletic adult doctor female pregnant					- athletic adult doctor female pregnant
Who should be saved? (passenger(s) [1] or pedestrian(s) [2])		Who should be saved? (passenger(s) [1] or pedestrian(s) [2])
======================================					======================================
# User Audit								# User Audit
======================================					======================================
- % SAVED AFTER 10 RUNS							- % SAVED AFTER 10 RUNS
cat: 1.0								cat: 1.0
criminal: 0.8								criminal: 0.8
ceo: 0.7								ceo: 0.7
pet: 0.7							     <
animal: 0.7								animal: 0.7
								     >	pet: 0.7
								     >	child: 0.6
dog: 0.6								dog: 0.6
red: 0.6							     <
ferret: 0.6								ferret: 0.6
child: 0.6							     <
athletic: 0.5								athletic: 0.5
average: 0.5								average: 0.5
student: 0.5							     <
unemployed: 0.5							     <
doctor: 0.5							     <
baby: 0.5								baby: 0.5
								     >	doctor: 0.5
female: 0.5								female: 0.5
person: 0.4							     |	student: 0.5
								     >	unemployed: 0.5
								     >	green: 0.5
								     >	red: 0.5
adult: 0.4								adult: 0.4
male: 0.4								male: 0.4
green: 0.4							     <
senior: 0.4								senior: 0.4
unknown: 0.3							     |	person: 0.4
pregnant: 0.3							     <
overweight: 0.3								overweight: 0.3
								     >	pregnant: 0.3
professor: 0.2								professor: 0.2
homeless: 0.0								homeless: 0.0
								     >	you: 0.0
--									--
average age: 47.8						     |	average age: 35.2
That's all. Press Enter to quit.				     |
								     >	That's all. Press any key to quit.
Oops, your results seem to be INCORRECT :-(
============================================
src/InteractiveMode.java
22:11:58_Friday_19_June_2020
============================================
import ethicalengine.Scenario;
import ethicalengine.ScenarioGenerator;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class InteractiveMode {
    private ArrayList<Scenario> configs = new ArrayList<>();
    private boolean configMode = false;
    private boolean saveToFile = false;
    private String resultPath = "result.log";

    public InteractiveMode() {}

    public InteractiveMode(ArrayList<Scenario> configs, boolean isConfig) {
        this.configs = configs;
        configMode = isConfig;
    }

    private void setConsent() {
        boolean consentSet = false;
        while (!consentSet){
            System.out.println("Do you consent to have your decisions saved to a file? (yes/no)");
            String commandReceived = Audit.scannerObject.nextLine();
            if (commandReceived.equals("yes")){
                saveToFile = true;
                consentSet = true;
            }
            else if (commandReceived.equals("no")){
                saveToFile = false;
                consentSet = true;
            }
            else {
                System.out.print("Invalid response.");
            }
        }
    }

    public static void welcomeMessage() {
        try {
            BufferedReader inputStream = new BufferedReader(new FileReader("welcome.ascii"));
            String line = inputStream.readLine();
            while (line != null){
                System.out.println(line);
                line = inputStream.readLine();
            }
            inputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void runAudit(Audit audit, ArrayList<Scenario> config) {
        audit.loadScenarios(config);
        audit.manualRun();
        audit.printStatistic();
        if (saveToFile){
            audit.printToFile(resultPath);
        }
    }

    public void run() {
        welcomeMessage();
        setConsent();
        Audit audit = new Audit();
        audit.setAuditType("User");

        if (!configMode) {
            ScenarioGenerator generator = new ScenarioGenerator();
            for (int i = 0; i < 3; i++) {
                configs.add(generator.generate());
            }
        }
        if (configs.size() <= 3){
            if (configMode) {
                runAudit(audit, configs);
            } else {
                boolean response = true;
                while (response){
                    configs = new ArrayList<>();
                    ScenarioGenerator generator = new ScenarioGenerator();
                    for (int i = 0; i < 3; i++) {
                        configs.add(generator.generate());
                    }
                    runAudit(audit, configs);
                    System.out.println("Would you like to continue? (yes/no)");
                    String commandReceived = Audit.scannerObject.nextLine();
                    if (!commandReceived.equals("yes")){
                        response = false;
                    }
                }
            }
        }
        else {
            for (int i = 0; i < configs.size()/3; i++) {
                ArrayList<Scenario> configSlice = new ArrayList<>(configs.subList(3*i, 3*i+3));
                runAudit(audit, configSlice);
                System.out.println("Would you like to continue? (yes/no)");
                String commandReceived = Audit.scannerObject.nextLine();
                if (!commandReceived.equals("yes")){
                    break;
                }
            }
            if (configs.size()%3>0){
                ArrayList<Scenario> configSlice = new ArrayList<>(configs.subList(3*(configs.size()/3),
                        3*(configs.size()/3) + configs.size()%3));
                runAudit(audit, configSlice);
            }
        }
        System.out.println("That's all. Press any key to quit.");
        Audit.scannerObject.nextLine();
        System.exit(0);
    }

    public void setResultPath(String resultPath) {
        this.resultPath = resultPath;
    }

    public String getResultPath() {
        return resultPath;
    }
}
============================================
src/welcome.ascii
22:11:58_Friday_19_June_2020
============================================
                   __-------__
                 / _---------_ \
                / /           \ \
                | |           | |
                |_|___________|_|
            /-\|                 |/-\
           | _ |\       0       /| _ |
           |(_)| \      !      / |(_)|
           |___|__\_____!_____/__|___|
           [_______|COMP90041|_______] 
            ||||    ~~~~~~~~~    ||||
            `--'                 `--'

    $$\      $$\                              $$\                                
    $$$\    $$$ |                             $$ |                               
    $$$$\  $$$$ | $$$$$$\   $$$$$$\  $$$$$$\  $$ |                               
    $$\$$\$$ $$ |$$  __$$\ $$  __$$\ \____$$\ $$ |                               
    $$ \$$$  $$ |$$ /  $$ |$$ |  \__|$$$$$$$ |$$ |                               
    $$ |\$  /$$ |$$ |  $$ |$$ |     $$  __$$ |$$ |                               
    $$ | \_/ $$ |\$$$$$$  |$$ |     \$$$$$$$ |$$ |                               
    \__|     \__| \______/ \__|      \_______|\__|                               
    $$\      $$\                     $$\       $$\                               
    $$$\    $$$ |                    $$ |      \__|                              
    $$$$\  $$$$ | $$$$$$\   $$$$$$$\ $$$$$$$\  $$\ $$$$$$$\   $$$$$$\   $$$$$$$\ 
    $$\$$\$$ $$ | \____$$\ $$  _____|$$  __$$\ $$ |$$  __$$\ $$  __$$\ $$  _____|
    $$ \$$$  $$ | $$$$$$$ |$$ /      $$ |  $$ |$$ |$$ |  $$ |$$$$$$$$ |\$$$$$$\  
    $$ |\$  /$$ |$$  __$$ |$$ |      $$ |  $$ |$$ |$$ |  $$ |$$   ____| \____$$\ 
    $$ | \_/ $$ |\$$$$$$$ |\$$$$$$$\ $$ |  $$ |$$ |$$ |  $$ |\$$$$$$$\ $$$$$$$  |
    \__|     \__| \_______| \_______|\__|  \__|\__|\__|  \__| \_______|\_______/ 


Welcome to Moral Machines! 
    
The idea of Moral Machines is based on the Trolley Dilemma, a fictional scenario presenting a decision maker with a moral dilemma: choosing ”the lesser of two evils”. The scenario entails an autonomous car whose brakes fail at a pedestrian crossing. As it is too late to relinquish control to the car’s passengers, the car needs to make a decision. Now.

The answers are not straightforward. There are a number of variables at play, which influence how people may feel about the decision: the number of pedestrians or passengers, whether the pedestrians are crossing the street legally, and personal characteristics that our automomous car can somehow infer (people's body tye, profession, gender, age, etc.). This program is a thought experiment, which explores how decisions should be made by auditing algorithms and collecting user feedback. You, the user of this program, will be put into (im)possible situations, left to decide about life and death.============================================
src/ScenarioGenerator.java
22:11:58_Friday_19_June_2020
============================================
package ethicalengine;

import java.util.ArrayList;
import java.util.Random;

import static ethicalengine.Animal.*;
import static ethicalengine.Person.*;

public class ScenarioGenerator {

    public static class InvalidDataFormatException extends RuntimeException {
        public InvalidDataFormatException (String errorMessage){
            super(errorMessage);
        }
    }

    private final Random randObj = new Random();
    private int passMax = 5;
    private int passMin = 1;
    private int pedMax = 5;
    private int pedMin = 1;
    Gender[] genders = Gender.values();
    Profession[] professions = Profession.values();
    BodyType[] bodyTypes = BodyType.values();
    Species[] speciesL = Species.values();

    public ScenarioGenerator() {
        randObj.setSeed(randObj.nextLong());
    }

    public ScenarioGenerator(long seed) {
        randObj.setSeed(seed);
    }

    public ScenarioGenerator(long seed, int passMax, int passMin, int pedMax, int pedMin)
            throws NumberFormatException {
        randObj.setSeed(seed);
        if (passMax >= passMin && pedMax >= pedMin){
            setPassMax(passMax);
            setPassMin(passMin);
            setPedMax(pedMax);
            setPedMin(pedMin);
        }
        else{
            throw new NumberFormatException("Minimum value cannot be bigger than maximum value.");
        }
    }

    public Person getRandomPerson() {
        int age = randObj.nextInt(100);
        Gender gender = genders[randObj.nextInt(genders.length)];
        BodyType bodyType = bodyTypes[randObj.nextInt(bodyTypes.length)];

        Profession profession = professions[randObj.nextInt(professions.length-1)];
        boolean isPregnant = (gender == Gender.FEMALE) && (age > 16) && (age <= 68)
                && (randObj.nextInt(10) == 0);

        return new Person(age, profession, gender, bodyType, isPregnant);
    }

    public Animal getRandomAnimal() {
        int age = randObj.nextInt(20);
        Gender gender = genders[randObj.nextInt(genders.length)];
        BodyType bodyType = bodyTypes[randObj.nextInt(bodyTypes.length)];

        String species = speciesL[randObj.nextInt(speciesL.length)].toString();
        boolean isPet =  randObj.nextInt(3) == 0;

        return new Animal(age, species, gender, bodyType, isPet);
    }

    public Scenario generate(){
        int passCount = randObj.nextInt(passMax-passMin+1) + passMin;
        int pedCount = randObj.nextInt(pedMax-pedMin+1) + pedMin;
        int yourPosition = randObj.nextInt(3); // 0: absent, 1: passenger, 2: pedestrian.
        boolean isLegalCrossing = randObj.nextInt(2) == 0;
        ArrayList<Character> passList = new ArrayList<>();
        ArrayList<Character> pedList= new ArrayList<>();

        Person you = getRandomPerson();
        you.setAsYou(true);
        switch (yourPosition){
            case 1:
                passList.add(you);
                passCount -= 1;
                break;

            case 2:
                pedList.add(you);
                pedCount -= 1;
                break;
        }
        // passengers
        for (int i = 0; i < passCount ; i++) {
            passList.add((randObj.nextInt(2) == 0) ? getRandomPerson() : getRandomAnimal());
        }
        // pedestrians
        for (int i = 0; i < pedCount ; i++) {
            pedList.add((randObj.nextInt(2) == 0) ? getRandomPerson() : getRandomAnimal());
        }
        return new Scenario(passList, pedList, isLegalCrossing);
    }

    public ArrayList<Scenario> parseScenario(ArrayList<String[]> importedFile) {
        int lineCount = 0;
        boolean isGreen = true;
        ArrayList<Character> passengers = new ArrayList<>();
        ArrayList<Character> pedestrians = new ArrayList<>();
        ArrayList<Scenario> scenarios = new ArrayList<>();

        for (String[] line : importedFile) {
            lineCount += 1;
            try {
                if (line.length != 10) {
                    throw new InvalidDataFormatException(
                            "WARNING: invalid data format in config file in line " + lineCount);
                }
                switch (line[0].toLowerCase()){
                    case "person":
                        try {
                            Person person = new Person();
                            person.setGender(line[1], lineCount);
                            person.setAge(line[2], lineCount);
                            person.setBodyType(line[3], lineCount);
                            person.setProfession(line[4], lineCount);
                            person.setPregnant(Boolean.parseBoolean(line[5]));
                            person.setAsYou(Boolean.parseBoolean(line[6]));

                            if (line[9].equals("passenger")) {
                                passengers.add(person);
                            }
                            else {
                                pedestrians.add(person);
                            }
                        }
                        catch (NumberFormatException e) {

                        }
                        catch (RuntimeException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case "animal":
                        try {
                            Animal animal = new Animal();
                            animal.setGender(line[1],lineCount);
                            animal.setAge(line[2], lineCount);
                            animal.setBodyType(line[3], lineCount);
                            animal.setPet(Boolean.parseBoolean(line[8]));

                            if (!line[7].equals("")) {
                                animal.setSpecies(line[7]);
                            }
                            else {
                                animal.setSpecies("dog");
                            }
                            if (line[9].equals("passenger")) {
                                    passengers.add(animal);
                            }
                            else {
                                pedestrians.add(animal);
                            }
                        }
                        catch (RuntimeException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case "scenario:green":
                    case "scenario:red":
                        if (lineCount != 1) {
                            Scenario s = new Scenario(passengers, pedestrians, isGreen);
                            scenarios.add(s);
                            passengers = new ArrayList<>();
                            pedestrians = new ArrayList<>();
                        }
                        isGreen = line[0].toLowerCase().equals("scenario:green");
                        break;
                }
            }
            catch (RuntimeException e) {
                System.out.println(e.getMessage());
            }
        }
        Scenario s = new Scenario(passengers, pedestrians, isGreen);
        scenarios.add(s);
        return scenarios;
    }

    public void setPassMin(int passMin) {
        this.passMin = passMin;
    }

    public void setPassMax(int passMax) {
        this.passMax = passMax;
    }

    public void setPedMax(int pedMax) {
        this.pedMax = pedMax;
    }

    public void setPedMin(int pedMin) {
        this.pedMin = pedMin;
    }
}
============================================
src/Character.java
22:11:58_Friday_19_June_2020
============================================
package ethicalengine;

public abstract class Character {

    public static class InvalidCharacteristicException extends RuntimeException {
        public InvalidCharacteristicException(String errorMessage) {
            super(errorMessage);
        }
    }

    public enum Gender {MALE, FEMALE, UNKNOWN}
    public enum BodyType {AVERAGE, ATHLETIC, OVERWEIGHT, UNKNOWN}

    private int age;
    private Gender gender = Gender.UNKNOWN;
    private BodyType bodyType = BodyType.UNKNOWN;

    public Character() {}

    public Character(int age, Gender gender, BodyType bodyType) {
        try {
            this.setAge(age);
            this.setGender(gender);
            this.setBodyType(bodyType);
        }
        catch (RuntimeException e) {
            System.out.println(e.getMessage());
        }
    }

    public Character(Character c) {
        this.age = c.age;
        this.gender = c.gender;
        this.bodyType = c.bodyType;
    }

    public int getAge(){
        return this.age;
    }

    public void setAge(int age) throws NumberFormatException {
        if (age>=0) {
            this.age = age;
        }
        else{
            throw new NumberFormatException("Invalid input: age must be positive");
        }
    }

    public void setAge(String age, int lineCount) throws NumberFormatException {
        try {
            setAge(Integer.parseInt(age));
        }
        catch (java.lang.NumberFormatException e) {
            System.out.println("WARNING: invalid number format in config file in line " + lineCount);
            setAge(25);
        }
    }

    public Gender getGender(){
        return this.gender;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }

    public void setGender(String gender, int lineNumber)
            throws InvalidCharacteristicException {
        if (gender.toLowerCase().equals("female")){
            this.gender = Gender.FEMALE;
        }
        else if (gender.toLowerCase().equals("male")){
            this.gender = Gender.MALE;
        }
        else {
            this.gender = Gender.UNKNOWN;
            if (!gender.equals("")){
                throw new InvalidCharacteristicException(
                        "WARNING: invalid characteristic in config file in line " + lineNumber);
            }
        }
    }

    public BodyType getBodyType() {
        return bodyType;
    }

    public void setBodyType(BodyType bodyType) {
        this.bodyType = bodyType;
    }

    public void setBodyType(String bodyType, int lineNumber)
            throws InvalidCharacteristicException {
        boolean bodyTypeSet = false;
        for (BodyType b: BodyType.values()) {
            if (b.name().equals(bodyType.toUpperCase())){
                this.bodyType = b;
                bodyTypeSet = true;
            }
        }
        if (!bodyTypeSet && !bodyType.equals("")){
            this.bodyType = BodyType.UNKNOWN;
            throw new InvalidCharacteristicException(
                    "WARNING: invalid characteristic in config file in line " + lineNumber);
        }
    }

    public abstract String toString();

    public abstract boolean isYou();

}


============================================
src/Animal.java
22:11:58_Friday_19_June_2020
============================================
package ethicalengine;

public class Animal extends Character{
    enum Species {cat, dog, monkey, pig, duck, chicken, horse}

    private String species;
    private boolean isPet;

    public Animal() {}

    public Animal(String species){
        this.setSpecies(species);
    }

    public Animal(int age, String species, Gender gender, BodyType bodytype, boolean isPet){
        super(age, gender, bodytype);
        this.setSpecies(species);
        this.setPet(isPet);
    }

    public Animal(Animal a){
        this.species = a.species;
        this.isPet = a.isPet;
    }

    public void setSpecies(String species) {
        this.species = species;
    }

    public String getSpecies() {
        return species;
    }

    public boolean isPet() {
        return isPet;
    }

    public void setPet(boolean isPet) {
        this.isPet = isPet;
    }

    public String toString(){
        StringBuilder string = new StringBuilder();
        string.append(species.toLowerCase());
        if (isPet()){
            string.append(" is pet");
        }
        return string.toString();
    }

    public boolean isYou() {
        return false;
    }
}

============================================
src/Person.java
22:11:58_Friday_19_June_2020
============================================
package ethicalengine;

public class Person extends Character{

    public enum Profession {DOCTOR, CEO, FIREFIGHTER, JANITOR, CRIMINAL, HOMELESS,
        STUDENT, PROFESSOR, UNEMPLOYED, UNKNOWN, NONE}
    public enum AgeCategory {BABY, CHILD, ADULT, SENIOR}

    private Profession profession = Profession.UNKNOWN;
    private boolean isPregnant;
    private boolean isYou;

    public Person() {}

    public Person(int age, Profession profession, Gender gender,
                  BodyType bodytype, boolean isPregnant) {
        super(age, gender, bodytype);
        this.setProfession(profession);
        this.setPregnant(isPregnant);
    }

    public Person(Person p){
        super(p.getAge(), p.getGender(), p.getBodyType());
        this.profession = p.profession;
        this.isPregnant = p.isPregnant;
        this.isYou = p.isYou;
    }

    public Profession getProfession() {
        return profession;
    }

    public void setProfession(Profession profession) {
        if (getAgeCategory() == AgeCategory.ADULT){
            this.profession = profession;
        }
        else {
            this.profession = Profession.NONE;
        }
    }

    public void setProfession(String profession, int lineNumber)
            throws InvalidCharacteristicException {
        boolean professionSet = false;
        for (Profession p: Profession.values()) {
            if (p.name().equals(profession.toUpperCase())){
                setProfession(p);
                professionSet = true;
            }
        }
        // if invalid profession name received: alert user & set to unknown
        if (!professionSet && !profession.equals("")){
            setProfession(Profession.UNKNOWN);
            throw new InvalidCharacteristicException(
                    "WARNING: invalid characteristic in config file in line " + lineNumber);
        }
    }

    public boolean isPregnant() {
        return isPregnant;
    }

    public void setPregnant(boolean isPregnant) {
        if (getGender()==Gender.FEMALE) {
            this.isPregnant = isPregnant;
        }
        else {
            this.isPregnant = false;
        }
    }

    public AgeCategory getAgeCategory() {
        if (getAge() <= 4) {
            return AgeCategory.BABY;
        }
        else if (getAge() <= 16) {
            return AgeCategory.CHILD;
        }
        else if (getAge() <= 68) {
            return AgeCategory.ADULT;
        }
        else{
            return AgeCategory.SENIOR;
        }
    }

    public boolean isYou() {
        return isYou;
    }

    public void setAsYou(boolean isYou) {
        this.isYou = isYou;
    }

    public String toString() {
        StringBuilder string = new StringBuilder();
        if (isYou()){
            string.append("you ");
        }
        string.append(getBodyType().name().toLowerCase()).append(" ");
        string.append(getAgeCategory().name().toLowerCase()).append(" ");
        if (getAgeCategory()==AgeCategory.ADULT){
            string.append(getProfession().name().toLowerCase()).append(" ");
        }
        string.append(getGender().name().toLowerCase());
        if (isPregnant()){
            string.append(" pregnant");
        }
        return string.toString();
    }
}
============================================
src/EthicalEngine.java
22:11:58_Friday_19_June_2020
============================================
import ethicalengine.*;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class EthicalEngine {
    public static void main(String[] args) {
        boolean isInteractive = false;
        boolean isConfig = false;
        ArrayList<Scenario> configBuffer = new ArrayList<>();
        String resultOutput = "result.log";

        String joinedArgs = String.join(" ",args);
        String[] commandBundle = (" "+ joinedArgs).split(" -");

        for (String s: commandBundle) {
            String[] parameters = s.split(" ");
            try {
                switch (parameters[0]) {
                    case "c":
                    case "-config":
                        // if config path not provided: open help screen & exit
                        if (parameters.length < 2) {
                            helpScreen();
                        } else {
                            ArrayList<String[]> importedFile = new ArrayList<>();
                            try {
                                BufferedReader inputStream = new BufferedReader(new FileReader(parameters[1]));
                                String line = inputStream.readLine();
                                int lineCount = 1;

                                while (line != null) {
                                    System.out.println(line);
                                    // if not the first row: read that row
                                    if (lineCount != 1) {
                                        importedFile.add(line.split(",", -1));
                                    }
                                    lineCount += 1;
                                    line = inputStream.readLine();
                                }
                                inputStream.close();
                                // send imported file to scenario generator
                                ScenarioGenerator generator = new ScenarioGenerator();
                                configBuffer = generator.parseScenario(importedFile);
                                isConfig = true;
                            } catch (FileNotFoundException e) {
                                System.out.println("ERROR: could not find config file.");
                                System.exit(0);
                            } catch (IOException ignored) {
                            }
                        }
                        break;

                    case "h":
                    case "-help":
                        helpScreen();
                        break;

                    case "i":
                    case "-interactive":
                        isInteractive = true;
                        break;

                    case "r":
                    case "-results":
                        if (parameters.length < 2) {
                            helpScreen();
                        }
                        try {
                            new FileReader(parameters[1]);
                        } catch (FileNotFoundException e) {
                            System.out.println("ERROR: could not print results. Target directory does not exist.");
                            System.exit(0);
                        }
                        // input is fine: change save path
                        resultOutput = parameters[1];
                }
            }
            catch (ArrayIndexOutOfBoundsException ignored) {}
        }

        if (isInteractive) {
            // interactive mode
            InteractiveMode interactive = new InteractiveMode(configBuffer, isConfig);
            interactive.setResultPath(resultOutput);
            interactive.run();
        }
        else {
            // normal mode
            boolean response = true;
            Audit audit = new Audit();
            if (isConfig) {
                audit = new Audit(configBuffer);
                audit.run();
                audit.printToFile(resultOutput);
                audit.printStatistic();
            }
            else {
                while (response) {
                    InteractiveMode.welcomeMessage();
                    System.out.println();
                    System.out.println("How many runs do you want?");
                    audit.run(Integer.parseInt(Audit.scannerObject.nextLine()));
                    audit.printToFile(resultOutput);
                    audit.printStatistic();
                    System.out.println("Would you like to continue? (yes/no)");
                    if (!Audit.scannerObject.nextLine().equals("yes")){
                        response = false;
                    }
                }
            }
        }
    }

    public static DecisionEngine.Decision decide(Scenario scenario) {
        return (new DecisionEngine()).decide(scenario);
    }

    public static void helpScreen() {
        System.out.println("EthicalEngine - COMP90041 - Final Project");
        System.out.println();
        System.out.println("Usage: java EthicalEngine [arguments]");
        System.out.println();
        System.out.println("Arguments:");
        System.out.println("   -c or --config      Optional: path to config file");
        System.out.println("   -h or --help        Print Help (this message) and exit");
        System.out.println("   -r or --results     Optional: path to result log file");
        System.out.println("   -i or --interactive Optional: launches interactive mode");
        System.exit(0);
    }

}

============================================
src/Audit.java
22:11:58_Friday_19_June_2020
============================================
import ethicalengine.*;
import ethicalengine.Character;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

public class Audit {
    private String auditType = "Unspecified";
    private final HashMap<String, int[]> statisticsDatabase = new HashMap<>();
    private int runCount = 0;
    private int surviveCount = 0;
    private double ageAvg = 0.0;
    private ArrayList<Scenario> scenarioBuffer;

    public static Scanner scannerObject = new Scanner(System.in);

    public Audit() {}

    public Audit(ArrayList<Scenario> scenarioSet) {
        scenarioBuffer = scenarioSet;
    }

    public void loadScenarios (ArrayList<Scenario> scenarios) {
        scenarioBuffer = scenarios;
    }

    // run audit by randomly generated scenarios.
    public void run(int runs) {
        ScenarioGenerator generator = new ScenarioGenerator();
        for (int i = 0; i < runs ; i++) {
            Scenario scenario = generator.generate();
            DecisionEngine.Decision result = EthicalEngine.decide(scenario);
            this.updateStatistics(scenario, result);
            runCount += 1;
        }
    }

    // run audit by imported scenarios.
    public void run() {
        for (Scenario s: scenarioBuffer) {
            DecisionEngine.Decision result = EthicalEngine.decide(s);
            this.updateStatistics(s, result);
            runCount += 1;
        }
    }

    public void manualRun() {
        for (Scenario s: scenarioBuffer) {
            DecisionEngine.Decision decision = DecisionEngine.Decision.PASSENGERS;
            boolean decisionMade = false;

            System.out.print(s.toString());
            while (!decisionMade){
                System.out.println("Who should be saved? (passenger(s) [1] or pedestrian(s) [2])");
                switch (scannerObject.nextLine()){
                    case "passenger":
                    case "passengers":
                    case "1":
                        decision = DecisionEngine.Decision.PASSENGERS;
                        decisionMade = true;
                        break;

                    case "pedestrian":
                    case "pedestrians":
                    case "2":
                        decision = DecisionEngine.Decision.PEDESTRIANS;
                        decisionMade = true;
                        break;

                    default:
                        System.out.print("Invalid response. ");
                        break;
                }
            }
            this.updateStatistics(s, decision);
            runCount += 1;
        }
        // clear buffer
        scenarioBuffer = new ArrayList<>();
    }

    public String getAuditType() {
        return auditType;
    }

    public void setAuditType(String auditType) {
        this.auditType = auditType;
    }

    private void updateStatistics(Scenario scenario, DecisionEngine.Decision decision) {
        ArrayList<Character> survivors = (decision ==
                DecisionEngine.Decision.PASSENGERS) ?
                scenario.getPassengers() : scenario.getPedestrians();
        ArrayList<Character> sacrifices = (decision ==
                DecisionEngine.Decision.PASSENGERS) ?
                scenario.getPedestrians() : scenario.getPassengers();

        //survivors
        for (Character c: survivors) {
            characterUpdate(c, 1, scenario.isLegalCrossing());
        }
        //sacrifices
        for (Character c: sacrifices) {
            characterUpdate(c,0, scenario.isLegalCrossing());
        }
    }

    private void entryUpdate(String key, int modifier) {
        if (!key.equals("UNKNOWN") && !key.equals("NONE")){
            statisticsDatabase.putIfAbsent(key, new int[]{0, 0});
            int[] entry = statisticsDatabase.get(key);
            statisticsDatabase.replace(key, new int[]{entry[0]+1, entry[1]+modifier});
        }
    }

    private void characterUpdate(Character c, int modifier, boolean isLegalCrossing) {
        entryUpdate(isLegalCrossing? "green": "red", modifier);

        if (modifier == 1){
            ageAvg = ((ageAvg * surviveCount) + c.getAge())/(surviveCount +1);
            surviveCount += 1;
        }

        if (c instanceof Person) {
            entryUpdate(c.getBodyType().name(), modifier);
            entryUpdate(c.getGender().name(), modifier);
            entryUpdate(((Person) c).getProfession().name(), modifier);
            entryUpdate(((Person) c).getAgeCategory().name(), modifier);
            entryUpdate("person", modifier);
            if ((c).isYou()){
                entryUpdate("you", modifier);
            }
            if (((Person) c).isPregnant()){
                entryUpdate("pregnant", modifier);
            }
        }
        else if (c instanceof Animal) {
            entryUpdate(((Animal) c).getSpecies(), modifier);
            entryUpdate("animal", modifier);
            if (((Animal) c).isPet()){
                entryUpdate("pet", modifier);
            }
        }
    }

    public String toString() {
        StringBuilder string = new StringBuilder();
        string.append("======================================\n");
        string.append("# ").append(getAuditType()).append(" Audit\n");
        string.append("======================================\n");
        string.append("- % SAVED AFTER ").append(runCount).append(" RUNS\n");

        // sort database by survival rate.
        ArrayList <String[]> sortedDatabase = new ArrayList<>();
        for (String key:statisticsDatabase.keySet()) {
            int[] entry = statisticsDatabase.get(key);
            double survivalRate = Math.round(((double)entry[1]/(double) entry[0])*100.0)/100.0;
            sortedDatabase.add(new String[]{key, String.format("%.1f", survivalRate)});
        }
        //sortedDatabase.sort(Comparator.comparingDouble(o -> -1 * Double.parseDouble(o[1])));
        sortedDatabase.sort(Comparator.comparing((String[] o) -> -1 * Double.parseDouble(o[1]))
                .thenComparing(o -> o[0]));

        for (String[] s: sortedDatabase) {
            string.append(s[0].toLowerCase()).append(": ").append(s[1]).append("\n");
        }
        string.append("--\n");
        string.append("average age: ").append(new DecimalFormat("#.#").format(ageAvg)).append("\n");
        return string.toString();
    }

    public void printStatistic() {
        System.out.println(toString());
    }

    public void printToFile(String path) {
        try {
            PrintWriter outputStream = new PrintWriter(new FileOutputStream(path, true));
            outputStream.println(toString());
            outputStream.close();
        }
        catch (FileNotFoundException e) {
            System.out.println(
                    "ERROR: could not print results. Target directory does not exist.");
        }
    }
}
============================================
src/DecisionEngine.java
22:11:58_Friday_19_June_2020
============================================
import ethicalengine.Animal;
import ethicalengine.Character;
import ethicalengine.Person;
import ethicalengine.Scenario;

import java.util.HashMap;
import static ethicalengine.Character.BodyType.*;
import static ethicalengine.Person.AgeCategory.*;
import static ethicalengine.Person.Profession.*;

public class DecisionEngine {
    public enum Decision {PEDESTRIANS, PASSENGERS}

    final HashMap<Person.Profession, Double> professionMerit =
            new HashMap<Person.Profession, Double>() {
        { put(CEO, 1.0);
          put(CRIMINAL, 0.5);
          put(DOCTOR, 1.5);
          put(FIREFIGHTER, 1.5);
          put(JANITOR, 1.0);
          put(HOMELESS, 0.7);
          put(UNEMPLOYED, 1.0);
          put(STUDENT, 1.1);
          put(PROFESSOR, 1.1);
          put(Person.Profession.UNKNOWN, 1.0);
          put(NONE, 1.0);
          put(null, 1.0);
        }
    };
    final HashMap<Person.AgeCategory, Double> ageTypeMerit =
            new HashMap<Person.AgeCategory, Double>() {
        { put(BABY, 3.0);
          put(CHILD, 2.5);
          put(ADULT, 1.0);
          put(SENIOR, 0.8);
          put(null, 1.0);
        }
    };
    final HashMap<Character.BodyType, Double> bodyTypeMerit =
            new HashMap<Character.BodyType, Double>() {
        { put(AVERAGE, 1.0);
          put(ATHLETIC, 1.05);
          put(OVERWEIGHT, 0.95);
          put(Character.BodyType.UNKNOWN, 1.0);
          put(null, 1.0);
        }
    };
    final double illegalCrossingDemerit = 0.7;
    final double pregnantMerit = 3.0;
    final double animalMerit = 0.01;
    final double petMerit = 20.0;
    final double youMerit = 2.0;

    public Decision decide(Scenario scenario){
        double passengerRating = 0;
        double pedestrianRating = 0;

        for (Character c : scenario.getPassengers()) {
            passengerRating += rateCharacter(c);
        }
        for (Character c: scenario.getPedestrians()) {
            pedestrianRating += rateCharacter(c);
        }
        if (!scenario.isLegalCrossing()){
            pedestrianRating = pedestrianRating * illegalCrossingDemerit;
        }
        return (passengerRating > pedestrianRating) ? Decision.PASSENGERS : Decision.PEDESTRIANS;
    }

    public double rateCharacter(Character c) {
        if (c instanceof Person) {
            return professionMerit.get(((Person) c).getProfession()) *
                    ageTypeMerit.get(((Person) c).getAgeCategory()) *
                    bodyTypeMerit.get(c.getBodyType()) *
                    ((((Person) c).isPregnant()) ? pregnantMerit : 1.0) *
                    (c.isYou() ? youMerit : 1.0);
        }
        if (c instanceof Animal) {
            return animalMerit * (((Animal) c).isPet()? petMerit : 1.0);
        }
        return 0;
    }
}
============================================
src/Scenario.java
22:11:58_Friday_19_June_2020
============================================
package ethicalengine;

import java.util.ArrayList;
import java.util.Arrays;

public class Scenario {

    private final ArrayList<Character> passengers;
    private final ArrayList<Character> pedestrians;
    private boolean isLegalCrossing;

    public Scenario(Character[] passengers, Character[] pedestrians,
                    boolean isLegalCrossing){
        this.passengers = new ArrayList<>(Arrays.asList(passengers));
        this.pedestrians = new ArrayList<>(Arrays.asList(pedestrians));
        setLegalCrossing(isLegalCrossing);
    }

    public Scenario(ArrayList<Character> passengers, ArrayList<Character> pedestrians,
                    boolean isLegalCrossing){
        this.passengers = passengers;
        this.pedestrians = pedestrians;
        setLegalCrossing(isLegalCrossing);
    }

    public ArrayList<Character> getPassengers() {
        return passengers;
    }

    public ArrayList<Character> getPedestrians() {
        return pedestrians;
    }

    public boolean hasYouInCar() {
        for (Character c: getPassengers()) {
            if (c.isYou()){
                return true;
            }
        }
        return false;
    }

    public boolean hasYouInLane() {
        for (Character c: getPedestrians()) {
            if (c.isYou()){
                return true;
            }
        }
        return false;
    }

    public boolean isLegalCrossing() {
        return isLegalCrossing;
    }

    public void setLegalCrossing(boolean isLegalCrossing) {
        this.isLegalCrossing = isLegalCrossing;
    }

    public int getPassengerCount() {
        return getPassengers().size();
    }

    public int getPedestrianCount() {
        return getPedestrians().size();
    }

    public String toString() {
        StringBuilder string = new StringBuilder();
        string.append("======================================\n" +
                "# Scenario\n======================================\n");
        string.append("Legal Crossing: ").append((isLegalCrossing) ? "yes\n" : "no\n");
        string.append("Passengers (").append(getPassengerCount()).append(")\n");
        for (Character c: passengers) {
            string.append("- ").append(c.toString()).append("\n");
        }
        string.append("Pedestrians (").append(getPedestrianCount()).append(")\n");
        for (Character c: pedestrians) {
            string.append("- ").append(c.toString()).append("\n");
        }
        return string.toString();
    }

}
